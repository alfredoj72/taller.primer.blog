---
title: "Mi primer blog con Quarto"
subtitle: "(Slides para el presentador)"
date: "24/10/2022"
format: 
  revealjs:
    #logo: .png
    #smaller: true
    scrollable: true
    slide-level: 2
    height: 900
    width: 1600
    toc: false
    from: markdown+emoji  #- usar emojis https://gist.github.com/rxaviers/7360908)
    center-title-slide: true
    title-slide-attributes: #- atributos para la slide de titulo
      data-background-color: "#562457"   #- color de R-ladies
      #data-background-image: /imagenes/economia.gif
      #data-background-size: contain      
    preview-links: auto  #- true: abre un iframe en lugar de abrir ventana
    #multiplex: true  #- para que puedas manejar las slides del publico
    link-external-newwindow: true
    transition: fade
    #height: 900
    #width: 1600
    fontcolor: "#262d36"
    highlight-style: a11y
    code-line-numbers: true
    number-sections: false
    slide-number: c/t   # https://pandoc.org/MANUAL.html#structuring-the-slide-show
    incremental: false   # https://quarto.org/docs/presentations/#incremental-lists
#logo: imagenes/economia.gif
css: /assets/styles_slides_tareas.css
---



::: {.callout-note collapse="true" appearance="default" icon="false"}
#### Contexto

-   El taller está pensado para realizar con [R](https://cran.r-project.org/). Se utilizará el IDE [RStudio](https://www.rstudio.com/products/rstudio/) y [Quarto](https://quarto.org/). Se recomienda tener instaladas **versiones recientes** de los 3 programas

:::

<br>

{{< include ./_includes/_tt_02_02_3-formas-seguir.qmd >}}

<br>

# 2. Creación de un blog básico con Quarto  {background-color="#D7E8CB"}

 (2ª parte del tutorial)
 
 {{< include ./_includes/_tt_02_01_q-haremos.qmd >}}

<br>


---

{{< include ./_includes/_tt_02_03_tarea_01.qmd >}}

<br>

---

## Contenido del Qproject

{{< include ./_includes/_tt_02_04_estructura-Qproject.qmd >}}

 
Los **archivos importantes** ahora son:
 
 - `_quarto.yml`: especifica la estructura (y apariencia) del blog.
 
  - `about.qmd` : una de la páginas del blog

 - `index.qmd` : generará la "landing page" o Home
 
<br>

---

{{< include ./_includes/_tt_02_05_generacion-blog.qmd >}}


{{< include ./_includes/_tt_02_06_extensiones.qmd >}}


- Puedes ver [aquí](https://pjperez.quarto.pub/blog_prueba_00/), como quedaría el blog una vez alojado en Internet.

<br>

---

## Contenido del Qproject (tras procesar el blog)

{{< include ./_includes/_tt_02_07_estructura-02.qmd >}}


- Se han creado 2 subcarpetas: `_site` y `_freeze`

- `_site` es la carpeta que contiene el blog.

<br>

---


## Ver el blog en local

- `_site` es la carpeta que contiene el blog. Veamos su contenido

- La página principal (o Home) de nuestro blog es el archivo `index.html`.

- El archivo `index.html` ha sido generado por el fichero `index.qmd`. 


{{< include ./_includes/_tt_02_08_tarea-03.qmd >}}

<br>

---

## Contenido de `index.qmd` {.smaller}

- El archivo  `index.qmd` genera `index.html`, la página principal (o Home) de nuestro blog

{{< include ./_includes/_tt_02_09_landing-page.qmd >}}

<br>

---

## Alojando el blog  

{{< include ./_includes/_tt_02_10_tarea-04.qmd >}}

<br>

{{< include ./_includes/_tt_02_11_extensiones-02.qmd >}}

<br>

---

{{< include ./_includes/_tt_02_12_resumen.qmd >}}

<br>


# 3. Tuneado básico del blog  {background-color="#D7E8CB"}

(3ª parte del tutorial)

{{< include ./_includes/_tt_03_01_q-haremos.qmd >}}

<br>

---

## Archivo `_quarto.yml` {.smaller}

{{< include ./_includes/_tt_03_02_quarto-yaml.qmd >}}


---  

## 

{{< include ./_includes/_tt_03_03_tarea-01.qmd >}} 

- **linea 5**: título del blog
- **lineas 17-19**: añadimos la pestaña "Docencia" a la izquierda de la navbar
- **lineas 21-26**: modificamos el theme ...,  **CSS**, ....


- [Aquí](https://pjperez.quarto.pub/blog_prueba_01/) puedes ver como quedaría el blog tras haber modificado `_quarto.yml`.

---

{{< include ./_includes/_tt_03_04_tarea-02.qmd >}}

{{< include ./_includes/_tt_03_05_tarea-03.qmd >}}

{{< include ./_includes/_tt_03_06_tarea-04.qmd >}}



---

## Archivo `index.qmd`

{{< include ./_includes/_tt_03_07_archivo-index.qmd >}}

- De momento, **solo vamos a hacer cambios en la segunda linea**: cambiaremos el título.

- Fijaros que es un archivo especial: "sólo tiene yaml"

<br>

---

{{< include ./_includes/_tt_03_08_tarea-05.qmd >}}

<br>

---

## Archivo `about.qmd` {.smaller}

{{< include ./_includes/_tt_03_09_archivo-about.qmd >}}


- Si en el `yaml` se activa la opción `about:` (linea 4), entonces puedes usar unas **plantillas** que Quarto tiene disponibles para **crear About's pages**.

- Como puedes ver [aquí](https://quarto.org/docs/websites/website-about.html#templates) hay **5 plantillas**: jolla, trestles, solana, marquee y broadside.

- [Aquí](https://quarto.org/docs/websites/website-about.html) tienes la documentación oficial sobre estas plantillas. 

<br>

---

{{< include ./_includes/_tt_03_10_tarea-06.qmd >}}

<br>

---

## Archivo `styles.css`

- Puedes cambiar la apariencia estética del blog usando los `themes` predefinidos en Quarto o puedes usar el archivo `styles.css`^[Veremos en el tutorial nº 8 que también podremos usar archivos `.scss`]

{{< include ./_includes/_tt_03_11_tarea-07.qmd >}}

<br>

---

{{< include ./_includes/_tt_03_12_resumen.qmd >}}

<br>

# 4.  Workflow: ¿cómo crear un post?  {background-color="#D7E8CB"}

(4ª parte del tutorial)

{{< include ./_includes/_tt_04_01_q-haremos.qmd >}}

<br>

---

## ¿Donde están los posts del blog?

- Los ficheros `.qmd` que generan los posts están **en la carpeta `posts`** de nuestro Qproject que genera el blog. 

- **Cada post** está en **una carpeta diferente**:

{{< include ./_includes/_tt_04_02_carpeta-posts.qmd >}}


- Veamos (en la siguiente slide) el contenido de `./posts/welcome/`


---

## Contenido de cada subcarpeta de `./posts/`

<br>

- Por ejemplo de  `./posts/welcome/`


{{< include ./_includes/_tt_04_03_contenido-1-post.qmd >}}

<br>

---

{{< include ./_includes/_tt_04_04_tarea-01.qmd >}}


---


{{< include ./_includes/_tt_04_05_tarea-02.qmd >}}


<br>

---


{{< include ./_includes/_tt_04_06_resumen.qmd >}}


<br>

# 5. Escribiendo posts: practicando con Quarto  {background-color="#D7E8CB"}

(5ª parte del tutorial)

{{< include ./_includes/_tt_05_01_q-haremos.qmd >}}

{{< include ./_includes/_tt_05_02_warning.qmd >}}

<br>

----

## Ficheros `.qmd`

- Los ficheros `.qmd` tienen **3 partes**: YAML, texto y chunks de código. 

{{< include ./_includes/_tt_05_03_figura-01.qmd >}}

- Vámoslas una a una


---

##  YAML: ideas importantes

<br>

- El encabezamiento o **YAML** sirve para fijar **opciones y metadatos** de nuestro documento.

<br>

- El `YAML` será  procesado varias veces durante el procesado del documento: es leído por Quarto, knitr y Pandoc e **influirá en el output final**.

<br>

- El hecho de estar trabajando dentro de un **Qproject** nos da **mucha versatilidad** a la hora de especificar el YAML de nuestros documentos `.qmd`. Documentación oficial [aquí](https://quarto.org/docs/projects/quarto-projects.html)



## El `yaml` de un post se puede especificar en **3 niveles**

<br>

-  **Nivel proyecto**:todo Qproject tiene archivo `_quarto.yml`. Todo documento que se procese dentro del proyecto, heredará los metadatos definidos en `_quarto.yml`.

-  **Nivel carpeta**: si en una carpeta existe un documento `_metadata.yml`, los documentos de esa carpeta heredan sus metadatos. La carpeta `./posts/` de un blog suele tener un archivo `_metadata.yml`.

-  **Nivel documento**: En el yaml del propio documento `.qmd`

<br>

Si hay conflictos **prevalecen las opciones del nivel documento**, luego nivel carpeta y finalmente nivel proyecto.

**Documentación oficial** de Quarto con las **principales opciones** que se pueden fijar en el YAML para documentos html: [aquí](https://quarto.org/docs/output-formats/html-basics.html) y [aquí](https://quarto.org/docs/reference/formats/html.html)


--- 

## YAML: tal como lo tenemos ahora {.smaller}


{{< include ./_includes/_tt_05_04_yaml-tabset.qmd >}}


---

## YAML: NIVEL PROYECTO (opciones en `_quarto.yml`)  {.smaller}

Si quieres ver un documento `_quarto.yml` completito, ve [aquí](https://github.com/quarto-dev/quarto-web/blob/main/_quarto.yml). Pertenece a la [web de Quarto](https://quarto.org/docs/websites/). En `_quarto.yml` se suelen poner opciones referentes a 3 aspectos:

::: {.panel-tabset}

#### 1. Sobre el propio Qproject

{{< include ./_includes/_tt_05_05_yaml-proyecto.qmd >}}

<br>

- linea 4: podemos elegir la carpeta de destino de nuestro blog
- linea 5: podemos cambiar el render directory de los `.qmd`

<br>

Documentación oficial [aquí](https://quarto.org/docs/projects/quarto-projects.html).

#### 2. Estructura de la página web 

{{< include ./_includes/_tt_05_06_yaml-estructura-web.qmd >}}

<br>


Como ves, se añadirían elementos como:

- lineas 28 a 41: se añade un pie de página al blog

- lineas 24 y 25: Hemos añadido un elemento a la `navbar` concretamente el icono `Home`. La documentación oficial para elementos de navegación está [aquí](https://quarto.org/docs/websites/website-navigation.html)

- lineas 4 y 7-10: elementos de redes sociales como un favicon (linea 4), el url de la web y del repo en Github (lineas 5 y 6) y más elementos de redes sociales  (lineas 7 a 10). La documentación oficial para estos elementos está [aquí](https://quarto.org/docs/websites/website-tools.html)

<br>

#### 3. Formato de salida de los documentos 

{{< include ./_includes/_tt_05_07_yaml-formato-salida.qmd >}}

<br>

En un blog/web el formato de salida es siempre `.html`; sin embargo podemos especificar otras opciones como por ejemplo sí los documentos (o páginas de la web, o post del blog) tienen un índice flotante, etc... Documentación oficial [aquí](https://quarto.org/docs/output-formats/html-basics.html) y [aquí](https://quarto.org/docs/reference/formats/html.html)

:::

---

## Un ejemplo "completito" de `_quarto.yml`  {.smaller}

Si quieres ver un documento `_quarto.yml` completito, ve [aquí](https://github.com/quarto-dev/quarto-web/blob/main/_quarto.yml). Pertenece a la [web de Quarto](https://quarto.org/docs/websites/). 



:::: {.columns}

::: {.column width="50%"}

```{=html}
<iframe width="600px" height="400px" style="border:2px solid #dee2e6;" src="https://quarto.org/docs/guide/"></iframe>
```
:::

::: {.column width="50%"}

{{< include ./_includes/_include_quarto_completito.qmd >}}

:::

::::


---

{{< include ./_includes/_tt_05_08_tarea-01.qmd >}}


---

### YAML nivel carpeta

- Abajo el, contenido del fichero `./posts/_metadata.yml` de nuestro blog

{{< include ./_includes/_tt_05_09_yaml-nivel-carpeta.qmd >}}


---

### YAML nivel carpeta

<br>

{{< include ./_includes/_tt_05_10_tarea-5-02.qmd >}}


---

### YAML: nivel documento

<br>

{{< include ./_includes/_tt_05_11_tarea-5-03.qmd >}}


---

### Texto (o narrativas)


- Se escribe (al igual que en los documentos `.Rmd`)  en **markdown**. [Aquí](https://quarto.org/docs/authoring/markdown-basics.html) la documentación oficial de Quarto.


- Practicaremos (en un ejemplo): [tablas](https://quarto.org/docs/authoring/tables.html), [figuras](https://quarto.org/docs/authoring/figures.html), ...

- [Editor visual](https://www.rstudio.com/blog/exploring-rstudio-visual-markdown-editor/)


---

### CHUNKS

- **Comportamiento similar** a los chunks en documentos `.Rmd`. La documentación oficial está [aquí](https://quarto.org/docs/computations/execution-options.html)


##### Principales diferencias

- En ficheros `.qmd`, **las opciones de los chunks se pueden especificar globalmente en el YAML** y a nivel individual en cada uno de los chunks.



- En los **chunks individuales** ahora se se utiliza la **sintaxis YAML** (`key: value`) en lineas dentro del chunk que empiezan con `#|`. Por ejemplo:

![](./imagenes/tt_01/img_22.png){fig-align="center"}


---

### CHUNKS


- Las principales opciones son: **echo**, **eval**, **warning**, **error**, **output** e **include**. [Aquí](https://quarto.org/docs/computations/execution-options.html#output-options) la documentación oficial.


- `echo`, además los típicos true y false, ahora incorpora un nuevo valor `fenced` que facilita mostrar las marcas de los chunks en el documento final. Documentación [aquí](https://quarto.org/docs/computations/execution-options.html#fenced-echo). Los llamados **unexecuted Blocks**, documentación [aquí](https://quarto.org/docs/computations/execution-options.html#unexecuted-blocks), también facilitan mostrar las marcas de los chunks en el documento de salida.

- Además, si usamos `knitr` para ejecutar los chunks, entonces podemos usar todas las [opciones nativas de `knitr`](https://yihui.org/knitr/options/), como: collapse, fig.width, comment, etc ... Más información [aquí](https://quarto.org/docs/computations/execution-options.html#knitr-options). Un ejemplo:

![](./imagenes/tt_01/img_23.png){fig-align="center"}

