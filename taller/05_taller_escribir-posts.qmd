---
title: "Escribiendo posts: practicando con Quarto"
subtitle: "(5ª parte del taller [Mi primer blog con Quarto](https://perezp44.github.io/taller.primer.blog/))"
---

{{< include _contexto.qmd >}}

::: {.callout-note collapse="true" appearance="default" icon="false"}
## Recapitulación

-   En esta quinta parte del taller veremos como escribir nuestros posts con Quarto.

-   Las anteriores secciones del taller son:

    1. **Intro**: se presenta el taller

    2. **Creación de un blog (básico) con Quarto**: vimos como crear y alojar un **blog básico** con RStudio y Quarto.
    
    3. **Tuneado básico del blog**: modificamos ligeramente los ficheros `_quarto.yml`, `index.qmd`, `about.qmd` y `styles.css`.
    
    4. **Workflow: ¿cómo crear un post?**: vimos como generar nuevos posts para nuestro blog.
:::

------------------------------------------------------------------------

<br>

::: {.callout-tip  appearance="default" icon="false"}
## ¿Qué haremos en este tutorial?

- Aprender a escribir nuestro posts con Quarto: con ficheros `.qmd`

- En concreto veremos: yaml, texto, chunks

- Aprender a utilizar algunos truquillos de Quarto
:::


::: {.callout-warning  appearance="default" icon="true"}

Voy a **suponer que los asistentes al taller**, y posible lectores, de estos tutoriales **conocen Rmarkdown** y han escrito algún documento `.Rmd`. En ese caso, el paso de `.Rmd` a `.qmd` es sencillo. En cualquier caso, [aquí](https://quarto.org/docs/faq/rmarkdown.html) tienes unas FAQ's para usuarios de .Rmd que se preguntan si pasarse a Quarto.

Aquellos que no sepan qué es Rmarkdown pueden empezar por [aquí](https://perezp44.github.io/intro-ds-22-23-web/tutoriales/tt_07_Rmarkdown.html) o [aquí](https://perezp44.github.io/intro-ds-22-23-web/slides/slides_07_rmarkdown.html#1).

:::

<br>

En el tutorial anterior aprendimos a generar nuevos post para nuestro blog. Ahora **aprenderemos a escribir esos post**; veremos las **posibilidades que nos ofrece Quarto** a la hora de escribir y formatear nuestros posts. 

## Escribiendo con Quarto

En el tutorial anterior creamos un nuevo post en la carpeta `./posts/my-primer-post/`. En realidad ese post es idéntico al primero (`welcome`) ya que sencillamente hicimos un copy-paste. Ahora sí que vamos a modificar el contenido (yaml/texto/chunks) del post para aprender algunos truquillos sobre Quarto.

Ya sabemos que la carpeta `./posts/my-primer-post/` contiene dos archivos. El importante es `index.qmd` que es el archivo que genera el post. Veámoslo:


::: {layout-ncol=1}

![](./imagenes/tt_01/img_19b.png){fig-align="center"}
:::


Los ficheros `.qmd` tienen 3 partes: yaml, texto y chunks. Vamos a verla una a una.

## El `yaml`

El encabezamiento o **YAML**, se utiliza para fijar determinadas opciones y metadatos de nuestro documento^[El `yaml` será  procesado varias veces durante el procesado del documento: es leído por Quarto, knitr y Pandoc e influirá en el resultado final, pudiendo afectar al código, al contenido y al procesado del documento].

Una idea importante a recordar es que estamos trabajando con un **Qproject**. Trabajar con un Qproject tiene ventajas^[Puedes ver la documentación oficial de Quarto sobre proyectos [aquí](https://quarto.org/docs/projects/quarto-projects.html)], entre ellas:

- poder procesar todos los archivos con un solo comando: `quarto render <myproject>`

- la posibilidad de "freeze rendered output"

- la posibilidad de redireccionar los documentos de salida (output) a otro directorio

- posibilidad de compartir la configuración del YAML para múltiples documentos. Los metadatos compartidos se pueden definir tanto a nivel de proyecto como a nivel de directorio.


Esta última ventaja, la posibilidad de **compartir opciones de metadatos YAML en varios documentos**, es importante ahora, porque nos da diferentes posibilidades para especificar el YAML de nuestros documentos o posts.

<br>

### El `ymal` de un post

En un post se pueden especificar opciones YAML de **3 formas/niveles**:

1. **Nivel proyecto**: todos los Qprojects contienen un archivo de configuración llamado `_quarto.yml`, de forma que, todo documento que se procese (render) dentro del proyecto, heredará automáticamente los metadatos definidos en `_quarto.yml`.

2. **Nivel carpeta**: si en una carpeta existe un documento `_metadata.yml`, los documentos de esa carpeta tendrán automáticamente las opciones definidas allí. La carpeta `/posts/` de un blog suele tener un archivo `_metadata.yml`.

3. **Nivel documento**: En el yaml del propio post o documento `.qmd`

De esta forma, potencialmente, un post puede recibir opciones de yaml desde los 3 niveles. Si hay conflictos **prevalecen las opciones del nivel documento**, luego nivel carpeta y finalmente nivel proyecto.


Los blogs se publican en **formato html**, de forma que [aquí](https://quarto.org/docs/output-formats/html-basics.html) y [aquí](https://quarto.org/docs/reference/formats/html.html) tienes la **documentación oficial** de Quarto con las principales opciones que se pueden fijar con el `yaml` para documentos html;  pero creo que la forma más operativa para el taller es mostrar ejemplos de ficheros yaml y revisar su contenido.


::: {.panel-tabset}


#### nivel proyecto (_quarto.yml)


```{r, eval = FALSE}
#| code-overflow: wrap   #- {scroll, wrap}

# 1/ Opciones referentes al proyecto ----------------------------
project:
  type: website
  output-dir: docs #-- la carpeta donde se redirige el output (.html)
  # execute-dir: project #-- the working directory for rendering files within a project is the directory of the file itself. If you prefer to use the main project directory instead, you can add the execute-dir: project https://quarto.org/docs/projects/code-execution.html#working-dir

  
#- 2/ Opciones referentes a la estructura de la web -----------------
website:
  title: "Mi blog (aún en pruebas)"
  navbar:
    logo: "profile.jpg"
    right:
      - text: "About me"
        href: about.qmd
      - icon: github
        href: https://github.com/<tu-usuario-github>
      - icon: twitter
        href: https://twitter.com/<tu-usuario twitter>
      - icon: envelope
        url: "mailto:<tu-mail@uv.es>"
    left: 
      - text: "Docencia"
        href: docencia.qmd

#- 3/ Opciones referentes al formato de salida  -----------------
format:
  html:
    theme: minty  
    css: styles.css
    toc: true
    highlight-style: a11y
```




#### nivel carpeta (./posts/_metadata.yml)


```{r, eval = FALSE}
#| code-overflow: wrap   #- {scroll, wrap}

# options specified here will apply to all posts in this folder

# freeze computational output
# (see https://quarto.org/docs/projects/code-execution.html#freeze)
freeze: true

# Enable banner style title blocks
title-block-banner: true

```



#### nivel documento (./posts/my-primer-post/index.qmd)


```{r, eval = FALSE}
#| code-overflow: wrap   #- {scroll, wrap}

---
title: "Mi primer post con Quarto"
author: "Pedro J. Pérez"
date: "2022-10-25"
categories: [R, quarto]
---

Este es mi primer post con Quarto!!!!

![](thumbnail.jpg)

Acabé con mi primer post. FIN

```




:::




- todos los Qprojects contienen un archivo de configuración  llamado `_quarto.yml`: todo documento que se procese (render) dentro del directorio del proyecto heredará automáticamente los metadatos definidos en `_quarto.yml`.



### Opciones 

```{r, eval = FALSE}
# 1/ Opciones referentes al proyecto ----------------------------
project:
  type: website
  output-dir: docs #-- la carpeta donde se redirige el output (.html)
  # execute-dir: project #-- the working directory for rendering files within a project is the directory of the file itself. If you prefer to use the main project directory instead, you can add the execute-dir: project https://quarto.org/docs/projects/code-execution.html#working-dir

```




## Modificando el texto

- El texto (o narrativa) de un documento `.qmd` se escribe, al igual que en los documentos `.Rmd` en `markdown`.

- [Aquí](https://quarto.org/docs/authoring/markdown-basics.html) tienes las reglas principales de para escribir en `markdown`.

- Adicionalmente, hay muchas mas posibilidades en los documentos `.qmd`

## Chunks de código

- Los *chunks* de código también son muy similares en `.qmd`que en `.Rmd

- Las principales diferencias son: 


Link interno al [4º tutorial](04_taller_crear-post.qmd)

## Extras

- Create a tabset via a markdown div with the class name panel-tabset (e.g. ::: {.panel-tabset}) <https://quarto.org/docs/output-formats/html-basics.html#tabsets>


<br>

## Resumen

::: {.callout-tip collapse="true" appearance="default" icon="false"}
#### Resumen

- En esta cuarta parte del taller hemos visto como podemos generar/escribir nuevos posts para nuestro blog: solo hay replicar una de las carpetas de anteriores posts y cambiarle el nombre.

:::





<br>


## Referencias

(Algunos artículos sobre creación de blogs en Quarto)

- [ Eric Ekholm. 2022. Modifying the Default Quarto Blog Structure](https://www.ericekholm.com/posts/demo-quarto-site/)  es una web con blog . GOOOOD


