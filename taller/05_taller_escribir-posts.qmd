---
title: "Escribiendo posts: practicando con Quarto"
subtitle: "(5ª parte del taller [Mi primer blog con Quarto](https://perezp44.github.io/taller.primer.blog/))"
toc-title: Tutorial nº 5
---

{{< include ./_includes/_contexto.qmd >}}

::: {.callout-note collapse="true" appearance="default" icon="false"}
## Recapitulación

-   En esta quinta parte del taller veremos como escribir nuestros posts con Quarto.

-   Las anteriores secciones del taller son:

    1. **Intro**: se presenta el taller

    2. **Creación de un blog (básico) con Quarto**: vimos como crear y alojar un **blog básico** con RStudio y Quarto.
    
    3. **Tuneado básico del blog**: modificamos ligeramente los ficheros `_quarto.yml`, `index.qmd`, `about.qmd` y `styles.css`.
    
    4. **Workflow: ¿cómo crear un post?**: vimos como generar nuevos posts para nuestro blog.
:::

------------------------------------------------------------------------

<br>


{{< include ./_includes/_tt_05_01_q-haremos.qmd >}}


{{< include ./_includes/_tt_05_02_warning.qmd >}}


<br>

En el tutorial anterior aprendimos a generar nuevos post para nuestro blog. Ahora **aprenderemos a escribir esos post**: veremos las **posibilidades que nos ofrece Quarto** a la hora de escribir y formatear nuestros posts. 

## Escribiendo con Quarto

En el tutorial anterior creamos un nuevo post en la carpeta `./posts/my-primer-post/`. En realidad ese post es idéntico al primero (`welcome`) ya que sencillamente hicimos un copy-paste. Ahora sí que vamos a modificar el contenido (yaml/texto/chunks) del post para aprender algunos truquillos sobre Quarto.

Ya sabemos que la carpeta `./posts/my-primer-post/` contiene dos archivos. El importante es `index.qmd` que es el archivo que genera el post. Veámoslo:

{{< include ./_includes/_tt_05_03_figura-01.qmd >}}



Los ficheros `.qmd` tienen **3 partes**: YAML, texto y chunks de código. Vamos a verlas una a una.

## YAML

El encabezamiento o **YAML**, se utiliza para fijar determinadas opciones y metadatos de nuestro documento^[El `YAML` será  procesado varias veces durante el procesado del documento: es leído por Quarto, knitr y Pandoc e influirá en el resultado final, pudiendo afectar al código, al contenido y al procesado del documento].

Una idea importante a recordar es que estamos trabajando con un **Qproject**. Trabajar con un Qproject tiene ventajas^[Puedes ver la documentación oficial de Quarto sobre proyectos [aquí](https://quarto.org/docs/projects/quarto-projects.html)], entre ellas:

- poder procesar todos los archivos con un solo comando: `quarto render <myproject>`

- la posibilidad de "freeze rendered output"

- la posibilidad de redireccionar los documentos de salida (output) a otro directorio

- posibilidad de compartir la configuración del YAML para múltiples documentos. Los metadatos compartidos se pueden definir tanto a nivel de proyecto como a nivel de directorio.


Esta última ventaja, la posibilidad de **compartir opciones de metadatos YAML en varios documentos**, es importante ahora, porque nos da diferentes posibilidades para especificar el YAML de nuestros documentos o posts.

<br>

### El `yaml` de un post

En un post se pueden especificar opciones YAML de **3 formas/niveles**:

1. **Nivel proyecto**: todos los Qprojects contienen un archivo de configuración llamado `_quarto.yml`, de forma que, todo documento que se procese (render) dentro del proyecto, heredará automáticamente los metadatos definidos en `_quarto.yml`.

2. **Nivel carpeta**: si en una carpeta existe un documento `_metadata.yml`, los documentos de esa carpeta tendrán automáticamente las opciones definidas allí. La carpeta `/posts/` de un blog suele tener un archivo `_metadata.yml`.

3. **Nivel documento**: En el yaml del propio post o documento `.qmd`

De esta forma, potencialmente, un post puede recibir opciones de YAML desde los 3 niveles. Si hay conflictos **prevalecen las opciones del nivel documento**, luego nivel carpeta y finalmente nivel proyecto.


Los blogs se publican en **formato html**, de forma que, [aquí](https://quarto.org/docs/output-formats/html-basics.html) y [aquí](https://quarto.org/docs/reference/formats/html.html) tienes la **documentación oficial** de Quarto con las **principales opciones** que se pueden fijar con el YAML para documentos html.

Es imposible repasar todas las opciones de YAML en el taller, veremos solamente algunas. Para ello, creo que la forma más operativa consistirá en mostrar ejemplos de ficheros `.yml` y revisar su contenido. Por ejemplo veamos las opciones YAML que tiene ahora nuestro blog:

<br>

#### Opciones YAML de nuestro blog

{{< include ./_includes/_tt_05_04_yaml-tabset.qmd >}}

<br>


### Yaml nivel proyecto 

En el fichero `_quarto.yml` se especifican opciones y metadatos que afectaran a todos los documentos del proyecto. En el caso que nos ocupa (un Qproject para crear una web/blog) allí se suelen especificar metadatos acerca de 3 aspectos: 

  1. Funcionamiento del Qproject 
  2. Estructura de la web  
  3. Formato de salida de los documentos 
  
#### 2.2.1 Funcionamiento del Qproject

Estas opciones acerca del funcionamiento del Qproject, se especifican en el fichero `_quarto.yml` (nivel proyecto).

{{< include ./_includes/_tt_05_05_yaml-proyecto.qmd >}}


Como vemos, podemos cambiar:

- la **carpeta** donde se generará el **output del proyecto** (linea 4: output_dir : docs). 

- el **directorio en el que se procesan los `.qmd`** (linea 5: execute-dir: project). Los ficheros `.qmd` se procesan habitualmente en el directorio en el que residen pero puedes cambiarlo al directorio principal del proyecto^[Aunque yo no lo haría: estoy muy acostumbrado a que el directorio de trabajo de los `.Rmd` sea la carpeta donde residen]. [Aquí](https://quarto.org/docs/projects/code-execution.html#working-dir) documentación oficial sobre distintos aspectos de los Qprojects y sus opciones de configuración 


<br>

#### 2.2.2 Estructura de la web 


Ya vimos algunas opciones en el 2º tutorial, veremos algunas más, pero será en el 7º tutorial. Como ejemplo, podríamos modificar esa sección de `_quarto.yml` para dejarla como:


{{< include ./_includes/_tt_05_06_yaml-estructura-web.qmd >}}



Como ves, se añadirían elementos como:

- Un pie de página (lineas 28 a 37)^[Puedes ver un ejemplo de cómo quedaría el pie de página en la web del taller, [aquí](https://perezp44.github.io/taller.primer.blog/materiales.html)]

- Hemos añadido un elemento a la `navbar` concretamente el icono `Home` (lineas 24 y 25). La documentación oficial para elementos de navegación está [aquí](https://quarto.org/docs/websites/website-navigation.html)

- Elementos de redes sociales como un favicon (linea 4), el url de la web y del repo en Github (lineas 5 y 6) y más elementos de redes sociales  (lineas 7 a 10). La documentación oficial para estos elementos está [aquí](https://quarto.org/docs/websites/website-tools.html)

<br>

#### 2.2.3 Formato de salida de los documentos 

En un blog/web el formato de salida es siempre `.html`; sin embargo podemos especificar otras opciones como por ejemplo sí los documentos (o páginas de la web, o post del blog) tienen un índice flotante, etc..., etc ....


{{< include ./_includes/_tt_05_07_yaml-formato-salida.qmd >}}

<br>

#### Tarea  5.1

Bien, una vez hemos repasado las principales opciones referentes a `_quarto.yml`, vamos a incorporar esas modificaciones a nuestro blog.

{{< include ./_includes/_tt_05_08_tarea-01.qmd >}}


<br>

### Yaml nivel carpeta

Como ya sabemos, si en una carpeta hay un fichero `_metadata.yml`, todos los documentos `.qmd` que se procesen en esa carpeta se verán afectados por esas opciones. Veamos como tenemos ahora mismo ese archivo.

Abajo el, contenido del fichero `./posts/_metadata.yml` de nuestro blog

{{< include ./_includes/_tt_05_09_yaml-nivel-carpeta.qmd >}}

<br>

#### Tarea  5.2

Vamos a cambiar un poco el archivo `./posts/_metadata.yml`, simplemente cambiaremos el valor de `freeze: true` a `freeze: auto` lo que hará que cuando hagamos un render global del proyecto, solo se vuelvan a ejecutar los archivos que hayan visto cambiado su contenido, el resto no se volverán a procesar.


{{< include ./_includes/_tt_05_10_tarea-5-02.qmd >}}


<br>

### Yaml en documento

Como dijimos, también podemos especificar metadatos y opciones para un documento `.qmd` en el encabezamiento del documento. Lógicamente esas opciones sólo afectarán a ese documento. 


#### Tarea 5.3

Probemos a cambiar el `yaml` o encabezamiento de `./posts/my-primer-post/index.qmd`

{{< include ./_includes/_tt_05_11_tarea-5-03.qmd >}}



<br>

## Texto

El texto (o narrativa) de un documento `.qmd` se escribe, al igual que en los documentos `.Rmd` en `markdown`. [Aquí](https://quarto.org/docs/authoring/markdown-basics.html) la documentación oficial de Quarto.


No lo vamos a practicar ahora. Lo haremos (un poco) luego cuando hagamos un post de ejemplo.
<br>

### Sintaxis básica de `markdown`

-  [Aquí](https://quarto.org/docs/authoring/markdown-basics.html) puedes ver o recordar la sintaxis básica, las principales reglas para escribir en `markdown`.

- Como ejemplo:

{{< include ./_includes/_tt_05_12_sintaxis-markdown.qmd >}}



<br>

### Más elementos para "escribir" 

Además de los elementos de escritura que nos ofrece la sintaxis básica de `markdown`. Quarto nos ofrece más posibilidades, veamos algunas de ellas:

- Links (documentación [aquí](https://quarto.org/docs/authoring/markdown-basics.html#links-images))

- Imágenes (documentación [aquí](https://quarto.org/docs/authoring/figures.html)) y sus [opciones](https://quarto.org/docs/computations/execution-options.html#figure-options)

- Listas  (documentación [aquí](https://quarto.org/docs/authoring/markdown-basics.html#lists))  

- Tablas  (documentación [aquí](https://quarto.org/docs/authoring/markdown-basics.html#tables))  

- Código  (documentación [aquí](https://quarto.org/docs/authoring/markdown-basics.html#source-code))  

- Ecuaciones  (documentación [aquí](https://quarto.org/docs/authoring/markdown-basics.html#equations))    


- Callout blocks  (documentación [aquí](https://quarto.org/docs/authoring/markdown-basics.html#callout-blocks))  

- Divs & spans  (documentación [aquí](https://quarto.org/docs/authoring/markdown-basics.html#divs-and-spans))  


<br>


El [editor visual](https://www.rstudio.com/blog/exploring-rstudio-visual-markdown-editor/) facilita la introducción de estos elementos en tus documentos.


<br>

## Chunks de código


Los *chunks* de código en `.qmd` también tienen un **comportamiento similar** a lo que ocurría en los chunks en documentos `.Rmd`. La documentación oficial está [aquí](https://quarto.org/docs/computations/execution-options.html)

### Diferencias con .Rmd

Las **principales diferencias** son:

- En `.Rmd` las opciones de los chunks se podían especificar de forma global en un chunk inicial (generalmente llamado setup) y a nivel individual en cada uno de los chunks; mientras que ahora, con `.qmd`, **las opciones de los chunks se pueden especificar globalmente en el YAML** y a nivel individual en cada uno de los chunks.

    {{< include ./_includes/_tt_05_13_extensiones-01.qmd >}}



- En los **chunks individuales** ahora se se utiliza la **sintaxis YAML** (`key: value`) en lineas dentro del chunk que empiezan con `#|`. Por ejemplo:

![](./imagenes/tt_01/img_22.png){fig-align="center"}


- Las principales opciones son: **echo**, **eval**, **warning**, **error**, **output** e **include**. [Aquí](https://quarto.org/docs/computations/execution-options.html#output-options) la documentación oficial.


- `echo`, además los típicos true y false, ahora incorpora un nuevo valor `fenced` que facilita mostrar las marcas de los chunks en el documento final. Documentación [aquí](https://quarto.org/docs/computations/execution-options.html#fenced-echo). Los llamados **unexecuted Blocks**, documentación [aquí](https://quarto.org/docs/computations/execution-options.html#unexecuted-blocks), también facilitan mostrar las marcas de los chunks en el documento de salida.

- Además, si usamos `knitr` para ejecutar los chunks, entonces podemos usar todas las [opciones nativas de `knitr`](https://yihui.org/knitr/options/), como: collapse, fig.width, comment, etc ... Más información [aquí](https://quarto.org/docs/computations/execution-options.html#knitr-options). Un ejemplo:

![](./imagenes/tt_01/img_23.png){fig-align="center"}

<br>

### Más opciones para los chunks

La documentación oficial la tienes [aquí](https://quarto.org/docs/output-formats/html-code.html).

- Puedes hacer `folding code`

```{r, eval = FALSE}
#| echo: fenced
#| code-fold: true #- {true, false, show}
#| code-summary: "Muéstrame el código"
2 + 2
```

- Si el código es muy largo, puedes usar  `code-overflow: wrap`  y `code-overflow: scroll` 


```{r, eval = FALSE}
#| echo: fenced
#| code-overflow: wrap
2 + 2  +2 + 2 + 2 + 2  +2 + 2 + 2 + 2  + 2 + 2 + 2 + 2  + 2 + 2 + 2 + 2  + 2 + 2 + 2 + 2  +2 + 2
```

- Puedes hacer que se muestre el número de linea


```{r, eval = FALSE}
#| echo: fenced
#| code-line-numbers: true
2 + 2 
4 + 4
```




<br>

## Layout 

Además de yaml, texto y chunk, para escribir con Quarto conviene conocer la estructura o layout de los artículos que se generan con él. Las páginas tienen un body, un margin y un área para las sidebars, que en nuestro caso contiene un TOC^[Además, el layout puede venir afectado por la opción `page-layout: custom   #- {article, full, custom}`. Documentación oficial [aquí](https://quarto.org/docs/output-formats/page-layout.html) ].  Documentación oficial [aquí](https://quarto.org/docs/authoring/article-layout.html).

Para ver las distintas posibilidades que tenemos, insertaremos una imagen ocupando distintas áreas del artículo. Empezaremos situando la imagen en el margen. para ello habría que hacer lo siguiente: 

```
::: {.column-margin}

![](imagenes/my_layout-01.png){fig-align="center"}

:::
```

::: {.column-margin}
![](imagenes/my_layout-01a.png){fig-align="center"}
:::

:::{.column-body}
![](imagenes/my_layout-02a.png){fig-align="center"}
:::



:::{.column-body-outset}
![](imagenes/my_layout-03.png){fig-align="center"}
:::


:::{.column-page-inset}
![](imagenes/my_layout-04.png){fig-align="center"}
:::


:::{.column-page}
![](imagenes/my_layout-05.png){fig-align="center"}
:::


::: {.column-screen-inset}
![](imagenes/my_layout-06.png){fig-align="center"}
:::


::: {.column-screen}
![](imagenes/my_layout-07.png){fig-align="center"}
:::


<br>




El output de los chunks también puede ocupar distintas áreas. Veamos  si un leaflet se puede poner en el margen:


```{r}
#| column: margin
#| echo: fenced
library(leaflet)
leaflet() %>%
  addTiles() %>%  # Add default OpenStreetMap map tiles
  addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
```

<br>


Y ahora ocupando toda la pantalla:

```{r}
#| column: screen
#| echo: fenced
library(leaflet)
leaflet() %>%
  addTiles() %>%  # Add default OpenStreetMap map tiles
  addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
```



<br>

Como no puede ser de otro modo, aún hay más opciones para el layout. Documentación [aquí](https://quarto.org/docs/authoring/article-layout.html#overflowing-content)

<br>


## Resumen

{{< include ./_includes/_tt_05_14_resumen.qmd >}}

<br>

----------------------

<br>



## Práctica

En esta sección dedicaremos un tiempo a la práctica libre para que practiques la creación y escritura de un post. Para ello te ofrezco la siguiente plantilla para elaborar un post con diferentes elementos:

- Añadir una nueva página a la web (`quarto.yml`)

{{< include ./_includes/_tt_03_13_practica-01.qmd >}}


- Modificar la apariencia del blog jugando con las opciones que nos proporciona Quarto (`index.qmd`)

{{< include ./_includes/_tt_03_13_practica-02.qmd >}}


- Modificar la apariencia de la página About (`about.qmd`)

{{< include ./_includes/_tt_03_13_practica-03.qmd >}}





## Un ejemplo

Usaremos un ejemplo para **practicar la sintaxis y nuevas posibilidades de Quarto** a la hora de generar documentos `.html`: o sea, para escribir posts para nuestro blog.

Incorporaremos los siguientes elementos:

- Link interno a las  [slides de introducción](01_taller_slides.qmd)

- Create a tabset via a markdown div with the class name panel-tabset (e.g. ::: {.panel-tabset}) <https://quarto.org/docs/output-formats/html-basics.html#tabsets>

- Bilio (.csl, .bib, lin-citations: yes). LatinR 1:09  R.version.string <https://www.youtube.com/watch?v=d8jSN998Mtw>

- [Videos](https://quarto.org/docs/authoring/videos.html) 


-Extensiones



#### Divs y Spans


- [Divs y Spans](https://quarto.org/docs/authoring/markdown-basics.html#divs-and-spans)

::: {.border}
This content can be styled with a border

:::

``` markdown
:::{.callout-note}
Note that there are five types of callouts, including: 
`note`, `tip`, `warning`, `caution`, and `important`.
:::
```



``` markdown
[This is *some text*]{.class key="val"}
```


#### Call-outs

[Call-outs bervatim](https://github.com/quarto-dev/quarto-web/blob/main/docs/authoring/markdown-basics.qmd)

``` markdown
:::{.callout-note}
Note that there are five types of callouts, including: 
`note`, `tip`, `warning`, `caution`, and `important`.
:::
```
### Inline

-  para inline has de `` `r ` ``.

<br>




