---
title: "Escribiendo posts: practicando con Quarto"
subtitle: "(5ª parte del taller [Mi primer blog con Quarto](https://perezp44.github.io/taller.primer.blog/))"
---

{{< include ./_includes/_contexto.qmd >}}

::: {.callout-note collapse="true" appearance="default" icon="false"}
## Recapitulación

-   En esta quinta parte del taller veremos como escribir nuestros posts con Quarto.

-   Las anteriores secciones del taller son:

    1. **Intro**: se presenta el taller

    2. **Creación de un blog (básico) con Quarto**: vimos como crear y alojar un **blog básico** con RStudio y Quarto.
    
    3. **Tuneado básico del blog**: modificamos ligeramente los ficheros `_quarto.yml`, `index.qmd`, `about.qmd` y `styles.css`.
    
    4. **Workflow: ¿cómo crear un post?**: vimos como generar nuevos posts para nuestro blog.
:::

------------------------------------------------------------------------

<br>


{{< include ./_includes/_tt_05_01_q-haremos.qmd >}}


{{< include ./_includes/_tt_05_02_warning.qmd >}}


<br>

En el tutorial anterior aprendimos a generar nuevos post para nuestro blog. Ahora **aprenderemos a escribir esos post**; veremos las **posibilidades que nos ofrece Quarto** a la hora de escribir y formatear nuestros posts. 

## Escribiendo con Quarto

En el tutorial anterior creamos un nuevo post en la carpeta `./posts/my-primer-post/`. En realidad ese post es idéntico al primero (`welcome`) ya que sencillamente hicimos un copy-paste. Ahora sí que vamos a modificar el contenido (yaml/texto/chunks) del post para aprender algunos truquillos sobre Quarto.

Ya sabemos que la carpeta `./posts/my-primer-post/` contiene dos archivos. El importante es `index.qmd` que es el archivo que genera el post. Veámoslo:


::: {layout-ncol=1}

![](./imagenes/tt_01/img_19b.png){fig-align="center"}
:::



Los ficheros `.qmd` tienen **3 partes**: YAML, texto y chunks de código^[En realidad el fichero que vemos arriba no tiene ningún chunk de código.]. Vamos a verlas una a una.

## YAML

El encabezamiento o **YAML**, se utiliza para fijar determinadas opciones y metadatos de nuestro documento^[El `YAML` será  procesado varias veces durante el procesado del documento: es leído por Quarto, knitr y Pandoc e influirá en el resultado final, pudiendo afectar al código, al contenido y al procesado del documento].

Una idea importante a recordar es que estamos trabajando con un **Qproject**. Trabajar con un Qproject tiene ventajas^[Puedes ver la documentación oficial de Quarto sobre proyectos [aquí](https://quarto.org/docs/projects/quarto-projects.html)], entre ellas:

- poder procesar todos los archivos con un solo comando: `quarto render <myproject>`

- la posibilidad de "freeze rendered output"

- la posibilidad de redireccionar los documentos de salida (output) a otro directorio

- posibilidad de compartir la configuración del YAML para múltiples documentos. Los metadatos compartidos se pueden definir tanto a nivel de proyecto como a nivel de directorio.


Esta última ventaja, la posibilidad de **compartir opciones de metadatos YAML en varios documentos**, es importante ahora, porque nos da diferentes posibilidades para especificar el YAML de nuestros documentos o posts.

<br>

### El `yaml` de un post

En un post se pueden especificar opciones YAML de **3 formas/niveles**:

1. **Nivel proyecto**: todos los Qprojects contienen un archivo de configuración llamado `_quarto.yml`, de forma que, todo documento que se procese (render) dentro del proyecto, heredará automáticamente los metadatos definidos en `_quarto.yml`.

2. **Nivel carpeta**: si en una carpeta existe un documento `_metadata.yml`, los documentos de esa carpeta tendrán automáticamente las opciones definidas allí. La carpeta `/posts/` de un blog suele tener un archivo `_metadata.yml`.

3. **Nivel documento**: En el yaml del propio post o documento `.qmd`

De esta forma, potencialmente, un post puede recibir opciones de YAML desde los 3 niveles. Si hay conflictos **prevalecen las opciones del nivel documento**, luego nivel carpeta y finalmente nivel proyecto.


Los blogs se publican en **formato html**, de forma que, [aquí](https://quarto.org/docs/output-formats/html-basics.html) y [aquí](https://quarto.org/docs/reference/formats/html.html) tienes la **documentación oficial** de Quarto con las **principales opciones** que se pueden fijar con el YAML para documentos html.

Como ves, es imposible repasar todas las opciones en el taller, solamente veremos algunas. Para ello, creo que la forma más operativa para el taller es mostrar ejemplos de ficheros `.yml` y revisar su contenido.


::: {.panel-tabset}


#### nivel proyecto (_quarto.yml)

Abajo el contenido del fichero `_quarto.yml` tal y como lo tenemos ahora en nuestro blog. Solo he añadido 3 comentarios para diferenciar entre secciones:

```{r, eval = FALSE}
#| code-overflow: wrap   #- {scroll, wrap}

# 1/ Opciones referentes al proyecto --------------------------------
project:
  type: website
 
#- 2/ Opciones referentes a la estructura de la web -----------------
website:
  title: "Mi blog (aún en pruebas)"
  navbar:
    logo: "profile.jpg"
    right:
      - text: "About me"
        href: about.qmd
      - icon: github
        href: https://github.com/<tu-usuario-github>
      - icon: twitter
        href: https://twitter.com/<tu-usuario twitter>
      - icon: envelope
        url: "mailto:<tu-mail@uv.es>"
    left: 
      - text: "Docencia"
        href: docencia.qmd

#- 3/ Opciones referentes al formato de salida  ---------------------
format:
  html:
    theme: minty  
    css: styles.css
    toc: true
    highlight-style: a11y
```


#### nivel carpeta (_metadata.yml)

Abajo el, contenido del fichero `/posts/_metadata.yml`. Afectará a todos los ficheros `.qmd` que haya en la carpeta `/posts/`

```{r, eval = FALSE}
#| code-overflow: wrap   #- {scroll, wrap}

# options specified here will apply to all posts in this folder

# freeze computational output
# (see https://quarto.org/docs/projects/code-execution.html#freeze)
freeze: true

# Enable banner style title blocks
title-block-banner: true

```

#### nivel documento (index.qmd)

Abajo el encabezamiento del fichero `/posts/my-primer-post/index.qmd`:

```{r, eval = FALSE}
#| code-overflow: wrap   #- {scroll, wrap}

---
title: "Mi primer post con Quarto"
author: "Pedro J. Pérez"
date: "2022-10-25"
categories: [R, quarto]
---

Este es mi primer post con Quarto!!!!

![](thumbnail.jpg)

Acabé con mi primer post. FIN

```

:::

<br>

### Distintas opciones YAML

<br>

#### Opciones referentes al proyecto 

Estas opciones, en principio, sólo se pueden poner una vez y, por tanto, se especifican en el fichero `_quarto.yml` (nivel proyecto).

```{r, eval = FALSE}
#| code-line-numbers: true
#| code-overflow: wrap

# 1/ Opciones referentes al proyecto ----------------------------
project:
  type: website
  output-dir: docs    #- podemos cambiar la carpeta donde se redirige el output (.html)
  # execute-dir: project    #- the working directory for rendering files within a project is the directory of the file itself. If you prefer to use the main project directory instead, you can add the execute-dir: project 
  #- https://quarto.org/docs/projects/code-execution.html#working-dir
  
```

Como vemos, podemos cambiar:

- la **carpeta** donde se generará el **output del proyecto** (linea 4: output_dir : docs). 

- el **directorio de trabajo** en el que se procesan los `.qmd` (linea 5: execute-dir: project). Yo no lo haría, estoy muy acostumbrado a que el directorio de trabajo de los `.Rmd` sea la carpeta donde se procesan.

<br>

#### Opciones referentes a la estructura de la página web 


Ya vimos algunas opciones en el 2º tutorial, veremos algunas más, pero será en el 7º tutorial. Como ejemplo, podríamos modificar esa sección de `_quarto.yml` para dejarla como:


```{r, eval = FALSE}
#| code-overflow: wrap   #- {scroll, wrap}
#| code-line-numbers: true


#- 2/ Opciones referentes a la estructura de la web -----------------
website:
  title: "Mi blog (aún en pruebas)"
  favicon: imagenes/ababol_redondeado.ico
  site-url: https://perezp44.github.io/taller.primer.blog/
  repo-url: https://github.com/perezp44/taller.primer.blog
  open-graph: true #-https://quarto.org/docs/websites/website-tools.html#twitter-cards
  twitter-card:
    creator: "@tu-usuario-twitter"
    card-style: summary_large_image
  navbar:
    logo: "profile.jpg"
    #background: primary    #- pink
    right:
      - text: "About me"
        href: about.qmd
      - icon: github
        href: https://github.com/<tu-usuario-github>
      - icon: twitter
        href: https://twitter.com/<tu-usuario-twitter>
      - icon: envelope
        url: "mailto:<tu-mail@uv.es>"
    left: 
      - icon: house-door
        href: index.html
      - text: "Docencia"
        href: docencia.qmd
  page-footer:
    left: "© 2022 Pedro J. Pérez"
    center: "Hecho con [Quarto](https://quarto.org)"
    right:
      - icon: github
        href: https://github.com/<tu-usuario-github>
      - icon: twitter
        href: https://twitter.com/<tu-usuario-twitter>
      - icon: envelope
        url: "mailto:<tu-mail>@uv.es"
      - text: <i class="ai ai-google-scholar" role="img"></i>
        href: https://scholar.google.de/citations?user=<tu-user>&hl=en
      - text: <i class="ai ai-orcid" role="img"></i>
        href: https://orcid.org/<tu-numero-orcid>
```

Como ves, se añadirían elementos como:

- Un pie de página (lineas 28 a 41)^[Puedes ver un ejemplo de cómo quedaría el pie de página en la web del taller, [aquí](https://perezp44.github.io/taller.primer.blog/materiales.html)]

- Hemos añadido un elemento a la `navbar` concretamente el icono `Home` (lineas 24 y 25). La documentación oficial para elementos de navegación está [aquí](https://quarto.org/docs/websites/website-navigation.html)

- Elementos de redes sociales como un favicon (linea 4), el url de la web y del repo en Github (lineas 5 y 6) y más elementos de redes sociales  (lineas 7 a 10). La documentación oficial para estos elementos está [aquí](https://quarto.org/docs/websites/website-tools.html)


<br>

## Texto

El texto (o narrativa) de un documento `.qmd` se escribe, al igual que en los documentos `.Rmd` en `markdown`. [Aquí](https://quarto.org/docs/authoring/markdown-basics.html) la documentación oficial de Quarto.

<br>

### Sintaxis básica de `markdown`

-  [Aquí](https://quarto.org/docs/authoring/markdown-basics.html) puedes ver o recordar la sintaxis básica, las principales reglas para escribir en `markdown`.

- Como ejemplo:

+-----------------------------------+-------------------------------+
| SI ESCRIBES ESTO:                 | SE VERÁ ESTO (output):        |
+===================================+===============================+
| **Formato de texto**                                              |
+===================================+===============================+
|     *italics* and **bold**        | *italics* and **bold**        |
+-----------------------------------+-------------------------------+
|     superscript^2^ / subscript~2~ | superscript^2^ / subscript~2~ |
+-----------------------------------+-------------------------------+
|     ~~strikethrough~~             | ~~strikethrough~~             |
+-----------------------------------+-------------------------------+
|     `verbatim code`               | `verbatim code`               |
+===================================+===============================+
| **TÍTULOS**                                                       |
+===================================+===============================+


<br>

### Más elementos para "escribir" 

Además de los elementos de escritura que nos ofrece la sintaxis básica de `markdown`. Quarto nos ofrece más posibilidades, veamos algunas de ellas:

#### Figuras

<https://quarto.org/docs/authoring/figures.html>

#### Tablas

<https://quarto.org/docs/authoring/tables.html>


- Escribir con el editor visual: <https://www.rstudio.com/blog/exploring-rstudio-visual-markdown-editor/>

<br><br>

## Chunks de código

- Los *chunks* de código también son muy similares en `.qmd`que en `.Rmd

- Las principales diferencias son: 


Link interno al [4º tutorial](04_taller_crear-post.qmd)

## Extras

- Create a tabset via a markdown div with the class name panel-tabset (e.g. ::: {.panel-tabset}) <https://quarto.org/docs/output-formats/html-basics.html#tabsets>

- Bilio (.csl, .bib, lin-citations: yes). LatinR 1:09  R.version.string <https://www.youtube.com/watch?v=d8jSN998Mtw>

<br>

## Resumen

::: {.callout-tip collapse="true" appearance="default" icon="false"}
#### Resumen

- En esta cuarta parte del taller hemos visto como podemos generar/escribir nuevos posts para nuestro blog: solo hay replicar una de las carpetas de anteriores posts y cambiarle el nombre.

:::





<br>


## Referencias

(Algunos artículos sobre creación de blogs en Quarto)

- [ Eric Ekholm. 2022. Modifying the Default Quarto Blog Structure](https://www.ericekholm.com/posts/demo-quarto-site/)  es una web con blog . GOOOOD


