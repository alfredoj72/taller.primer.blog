---
title: "Escribiendo posts: practicando con Quarto (5ª parte del taller)"
author: "Pedro J. Pérez"
date: 2022-10-10
date-format: short
format: 
  html:
    theme: minty  #- https://quarto.org/docs/output-formats/html-themes.html
    #-https://quarto.org/docs/websites/website-blog.html#themes
    backgroundcolor: "#F1F3F4"
    toc: true
    toc-depth: 3
    toc-location: left
    smooth-scroll: true
    embed-resources: true  #self-contained: true 
    #standalone: true  
    link-external-icon: false
    link-external-newwindow: true
    html-math-method: katex
    citations-hover: false
    footnotes-hover: false
    css: assets/styles.css
comments:
  hypothesis: 
    theme: clean
---

{{< include _contexto.qmd >}}


::: {.callout-note collapse="true" appearance="default" icon="false"}
## Recapitulación

-   En esta quinta parte del taller veremos como escribir nuestros posts con Quarto.

-   Las anteriores secciones del taller son:

    1. **Intro**: se presenta el taller

    2. **Creación de un blog (básico) con Quarto**: en la segunda parte del taller vimos como crear y alojar un **blog básico** con RStudio y Quarto.
    
    3. **Tuneado básico del blog**. Modificamos ligeramente los ficheros `_quarto.yml`, `index.qmd`, `about.qmd` y `styles.css`.
    
    4. **Workflow: ¿cómo crear un post?**. Vimos como generar nuevos posts para nuestro blog.
:::

<br>

------------------------------------------------------------------------

<br>

::: {.callout-tip  appearance="default" icon="false"}
## ¿Qué haremos en este tutorial?

- Ver como escribir nuestro posts con Quarto, con ficheros `.qmd`

- En concreto veremos: yaml, texto, chunks

- Aprender a utilizar algunos truquillos de Quarto
:::


<br>

En el tutorial anterior aprendimos a generar nuevos post para nuestro blog. Ahora **aprenderemos a escribir esos post**; veremos las **posibilidades que nos ofrece Quarto** a la hora de escribir y formatear nuestros posts. 

::: {.callout-warning  appearance="default" icon="true"}

Voy a suponer que los asistentes al taller y posible lectores de estos tutoriales conocen y han escrito algún documento en Rmarkdown. En ese caso, el paso de `.Rmd` a `.qmd` es sencillo. En cualquier caso, [aquí](https://quarto.org/docs/faq/rmarkdown.html) tienes unas FAQ's para usuarios de .Rmd que se preguntan si pasarse a Quarto.

Aquellos que no sepan qué es Rmarkdown pueden empezar por [aquí](https://perezp44.github.io/intro-ds-22-23-web/tutoriales/tt_07_Rmarkdown.html) o [aquí](https://perezp44.github.io/intro-ds-22-23-web/slides/slides_07_rmarkdown.html#1).

:::

## 1. Escribiendo con Quarto

En el tutorial anterior creamos un nuevo post en la carpeta `./posts/my-primer-post/`. En realidad ese post es idéntico al primero (`welcome`) ya que sencillamente hicimos un copy-paste. Ahora sí que vamos a modificar el contenido (yaml/texto/chunks) del post para aprender algunos truquillos sobre Quarto.

Ya sabemos que la carpeta `./posts/my-primer-post/` contiene dos archivos. El importante es `index.qmd` que es el archivo que genera el post. Veámoslo:


::: {layout-ncol=1}

![Contenido del fichero `index.qmd` de nuestro tercer post.](./imagenes/tt_01/img_19.png){fig-align="center"}
:::


Los ficheros `.qmd` tienen 3 partes: yaml, texto y chunks. Vamos a verla una a una.

## El `yaml`

El encabezamiento o **YAML**, se utiliza para fijar determinadas opciones y metadatos de nuestro documento^[El `yaml` será  procesado varias veces durante el procesado del documento: es leído por Quarto, knitr y Pandoc e influirá en el resultado final, pudiendo afectar al código, al contenido y al procesado del documento].

Una idea importante a recordar es que estamos trabajando con un **Qproject**. Trabajar con un Qproject tiene ventajas^[Puedes ver la documentación oficial de Quarto sobre proyectos [aquí](https://quarto.org/docs/projects/quarto-projects.html)], entre ellas:

- poder procesar todos los archivos con un solo comando: `quarto render <myproject>`

- la posibilidad de "freeze rendered output"

- la posibilidad de redireccionar los documentos de salida (output) a otro directorio

- posibilidad de compartir la configuración del YAML para múltiples documentos. Los metadatos compartidos se pueden definir tanto a nivel de proyecto como a nivel de directorio.


Esta última ventaja, la posibilidad de **compartir opciones de metadatos YAML en varios documentos**, es importante ahora, porque nos da diferentes posibilidades para especificar el YAML de nuestros documentos o posts.

### `ymal` de un post

En un post se pueden especificar opciones YAML de 3 formas/niveles:

1. En el yaml del propio post (nivel documento)
2. En el fichero `./posts/_metadata.yml` (nivel carpeta)
3. En el fichero `./_quarto.yml` (nivel proyecto)

Los posibles 3 yaml's se fusionan en el momento de procesar cada archivo `.qmd`. Si hay conflictos prevalece las opciones del nivel documento, luego nivel carpeta y finalmente nivel proyecto.

[Aquí]() puedes encontrar las opciones que se pueden fijar con el `yaml`, pero creo que la forma más operativa para el taller es mostrar ejemplos de ficheros yaml.`

html: <https://quarto.org/docs/output-formats/html-basics.html>
html-options: <https://quarto.org/docs/reference/formats/html.html>


::: {.panel-tabset}

### nivel documento

```yaml
---
---
title: "Mi primer post (luchando con Quarto)"
author: "Pedro J. Pérez"
date: "`r format(Sys.time(), '%d %B, %Y')`"
draft: false
format: 
  html:
    theme: minty  #- https://quarto.org/docs/output-formats/html-themes.html
    #-https://quarto.org/docs/websites/website-blog.html#themes
    backgroundcolor: "#F1F3F4"
    toc: true
    toc-depth: 3
    toc-location: left
    number-sections: false
    number-depth: 3
    smooth-scroll: true
    embed-resources: true  #self-contained: true 
    #standalone: true  
    link-external-icon: false
    link-external-newwindow: true
    html-math-method: katex  #- default: LaTeX eq rendered using MathJax
    citations-hover: false
    footnotes-hover: false
    css: assets/styles.css
comments:
  hypothesis: 
    theme: clean
---



---
title: "My document"
format:
  html:
    toc: true
    html-math-method: katex
    css: styles.css
---
```


### nivel carpeta


### nivel proyecto

:::




- todos los Qprojects contienen un archivo de configuración  llamado `_quarto.yml`: todo documento que se procese (render) dentro del directorio del proyecto heredará automáticamente los metadatos definidos en `_quarto.yml`.


## Modificando el texto

## Chunks de código


## Extras

- Create a tabset via a markdown div with the class name panel-tabset (e.g. ::: {.panel-tabset}) <https://quarto.org/docs/output-formats/html-basics.html#tabsets>


<br>

## Resumen

::: {.callout-tip collapse="true" appearance="default" icon="false"}
#### Resumen

- En esta cuarta parte del taller hemos visto como podemos generar/escribir nuevos posts para nuestro blog: solo hay replicar una de las carpetas de anteriores posts y cambiarle el nombre.

:::





<br>


## Referencias

(Algunos artículos sobre creación de blogs en Quarto)

- [ Eric Ekholm. 2022. Modifying the Default Quarto Blog Structure](https://www.ericekholm.com/posts/demo-quarto-site/)  es una web con blog . GOOOOD


