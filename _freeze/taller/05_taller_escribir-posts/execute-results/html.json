{
  "hash": "701daff35d8bb3ef29631000046bcefb",
  "result": {
    "markdown": "---\ntitle: \"Escribiendo posts: practicando con Quarto\"\nsubtitle: \"(5ª parte del taller [Mi primer blog con Quarto](https://perezp44.github.io/taller.primer.blog/))\"\ntoc-title: Tutorial nº 5\n---\n::: {.callout-note collapse=\"true\" appearance=\"default\" icon=\"false\"}\n#### Contexto\n\n-  Tutorial preparado para el taller **Mi primer blog con Quarto** impartido en Córdoba (Spain) durante el [I Congreso & XII Jornadas de Usuarios de R](http://r-es.org/12jr/), 23-25 de noviembre de 2022.\n-   El taller está pensado para realizar con [R](https://cran.r-project.org/). Se utilizará el IDE [RStudio](https://www.rstudio.com/products/rstudio/) y [Quarto](https://quarto.org/). Se recomienda tener instaladas **versiones recientes** de los 3 programas\n\n- Este tutorial es sólo una parte del taller. El **taller completo** está [aquí](https://perezp44.github.io/taller.primer.blog/).\n:::\n\n\n\n::: {.callout-note collapse=\"true\" appearance=\"default\" icon=\"false\"}\n## Recapitulación\n\n-   En esta quinta parte del taller veremos como escribir nuestros posts con Quarto.\n\n-   Las anteriores secciones del taller son:\n\n    1. **Intro**: se presenta el taller\n\n    2. **Creación de un blog (básico) con Quarto**: vimos como crear y alojar un **blog básico** con RStudio y Quarto.\n    \n    3. **Tuneado básico del blog**: modificamos ligeramente los ficheros `_quarto.yml`, `index.qmd`, `about.qmd` y `styles.css`.\n    \n    4. **Workflow: ¿cómo crear un post?**: vimos como generar nuevos posts para nuestro blog.\n:::\n\n------------------------------------------------------------------------\n\n<br>\n\n\n::: {.callout-tip  appearance=\"default\" icon=\"false\"}\n## ¿Qué haremos en este tutorial?\n\n- Aprender a escribir nuestro posts con Quarto: con ficheros `.qmd`\n\n- Repasaremos las 3 partes de los documentos `.qmd`: yaml, texto, chunks\n\n- Además veremos: **layout**\n\n- Aprender a utilizar algunos truquillos de Quarto\n:::\n\n::: {.callout-warning  appearance=\"default\" icon=\"true\"}\n\nVoy a **suponer que los asistentes al taller**, y posibles lectores de estos tutoriales, **conocen Rmarkdown** y han escrito algún documento `.Rmd`. En ese caso, el paso de `.Rmd` a `.qmd` es sencillo. \n\nEn cualquier caso, [aquí](https://quarto.org/docs/faq/rmarkdown.html) tienes unas FAQ's para usuarios de .Rmd que se preguntan si pasarse a Quarto, y [aquí](https://laderast.github.io/qmd_rmd/#/title-slide) unas slides sobre las diferencias entre `.qmd` y `.Rmd`.\n\nAquellos que no sepan qué es Rmarkdown pueden empezar por [aquí](https://perezp44.github.io/intro-ds-22-23-web/tutoriales/tt_07_Rmarkdown.html) o [aquí](https://perezp44.github.io/intro-ds-22-23-web/slides/slides_07_rmarkdown.html#1).\n\n:::\n\n\n\n\n<br>\n\nEn el tutorial anterior aprendimos a generar nuevos post para nuestro blog. Ahora **aprenderemos a escribir esos post**: veremos las **posibilidades que nos ofrece Quarto** a la hora de escribir y formatear nuestros posts. \n\n## Escribiendo con Quarto\n\nEn el tutorial anterior creamos un nuevo post en la carpeta `./posts/my-primer-post/`. En realidad ese post es idéntico al primero (`welcome`) ya que sencillamente hicimos un copy-paste. Ahora sí que vamos a modificar el contenido (yaml/texto/chunks) del post para aprender algunos truquillos sobre Quarto.\n\nYa sabemos que la carpeta `./posts/my-primer-post/` contiene dos archivos. El importante es `index.qmd` que es el archivo que genera el post. Veámoslo:\n\n::: {layout-ncol=1}\n\n![](./imagenes/tt_01/img_19c.png){fig-align=\"center\"}\n:::\n\n\n\n\n\nLos ficheros `.qmd` tienen **3 partes**: YAML, texto y chunks de código. Vamos a verlas una a una.\n\n## YAML\n\nEl encabezamiento o **YAML**, se utiliza para fijar determinadas opciones y metadatos de nuestro documento^[El `YAML` será  procesado varias veces durante el procesado del documento: es leído por Quarto, knitr y Pandoc e influirá en el resultado final, pudiendo afectar al código, al contenido y al procesado del documento].\n\nUna idea importante a recordar es que estamos trabajando con un **Qproject**. Trabajar con un Qproject tiene ventajas^[Puedes ver la documentación oficial de Quarto sobre proyectos [aquí](https://quarto.org/docs/projects/quarto-projects.html)], entre ellas:\n\n- poder procesar todos los archivos con un solo comando: `quarto render <myproject>`\n\n- la posibilidad de \"freeze rendered output\"\n\n- la posibilidad de redireccionar los documentos de salida (output) a otro directorio\n\n- posibilidad de compartir la configuración del YAML para múltiples documentos. Los metadatos compartidos se pueden definir tanto a nivel de proyecto como a nivel de directorio.\n\n\nEsta última ventaja, la posibilidad de **compartir opciones de metadatos YAML en varios documentos**, es importante ahora, porque nos da diferentes posibilidades para especificar el YAML de nuestros documentos o posts.\n\n<br>\n\n### El `yaml` de un post\n\nEn un post se pueden especificar opciones YAML de **3 formas/niveles**:\n\n1. **Nivel proyecto**: todos los Qprojects contienen un archivo de configuración llamado `_quarto.yml`, de forma que, todo documento que se procese (render) dentro del proyecto, heredará automáticamente los metadatos definidos en `_quarto.yml`.\n\n2. **Nivel carpeta**: si en una carpeta existe un documento `_metadata.yml`, los documentos de esa carpeta tendrán automáticamente las opciones definidas allí. La carpeta `/posts/` de un blog suele tener un archivo `_metadata.yml`.\n\n3. **Nivel documento**: En el yaml del propio post o documento `.qmd`\n\nDe esta forma, potencialmente, un post puede recibir opciones de YAML desde los 3 niveles. Si hay conflictos **prevalecen las opciones del nivel documento**, luego nivel carpeta y finalmente nivel proyecto.\n\n\nLos blogs se publican en **formato html**, de forma que, [aquí](https://quarto.org/docs/output-formats/html-basics.html) y [aquí](https://quarto.org/docs/reference/formats/html.html) tienes la **documentación oficial** de Quarto con las **principales opciones** que se pueden fijar con el YAML para documentos html.\n\nEs imposible repasar todas las opciones de YAML en el taller, veremos solamente algunas. Para ello, creo que la forma más operativa consistirá en mostrar ejemplos de ficheros `.yml` y revisar su contenido. Por ejemplo veamos las opciones YAML que tiene ahora nuestro blog:\n\n<br>\n\n#### Opciones YAML de nuestro blog\n\n::: {.panel-tabset}\n\n\n#### 1. nivel proyecto (_quarto.yml)\n\nAbajo el contenido del fichero `_quarto.yml` tal y como lo tenemos ahora en nuestro blog. Solo he añadido 3 comentarios para diferenciar entre secciones:\n\n::: {.cell}\n\n```{.r .cell-code .code-overflow-scroll}\n# 1/ Opciones referentes al proyecto --------------------------------\nproject:\n  type: website\n \n#- 2/ Opciones referentes a la estructura de la web -----------------\nwebsite:\n  title: \"Mi blog (aún en pruebas)\"\n  navbar:\n    logo: \"profile.jpg\"\n    right:\n      - text: \"About me\"\n        href: about.qmd\n      - icon: github\n        href: https://github.com/<tu-usuario-github>\n      - icon: twitter\n        href: https://twitter.com/<tu-usuario-twitter>\n      - icon: envelope\n        url: \"mailto:<tu-mail@uv.es>\"\n    left: \n      - text: \"Docencia\"\n        href: docencia.qmd\n\n#- 3/ Opciones referentes al formato de salida  ---------------------\nformat:\n  html:\n    theme: flatly  \n    css: styles.css\n    toc: true\n    highlight-style: a11y\n```\n:::\n\n\n#### 2. nivel carpeta (_metadata.yml)\n\nAbajo el, contenido del fichero `./posts/_metadata.yml`. Afectará a todos los ficheros `.qmd` que haya en la carpeta `./posts/`\n\n::: {.cell}\n\n```{.r .cell-code .code-overflow-scroll}\n# options specified here will apply to all posts in this folder\n\n# freeze computational output\n# (see https://quarto.org/docs/projects/code-execution.html#freeze)\nfreeze: true\n\n# Enable banner style title blocks\ntitle-block-banner: true\n```\n:::\n\n#### 3. nivel documento (index.qmd)\n\nAbajo el encabezamiento del fichero `./posts/my-primer-post/index.qmd`:\n\n````markdown\n---\ntitle: \"Mi primer post con Quarto\"\nauthor: \"Pedro J. Pérez\"\ndate: \"2022-10-25\"\ncategories: [R, quarto]\n---\n\nEste es mi **primer post** con Quarto!!!!\n\n```{{r}}\nsqrt(2 + 2)\n```\n\nAcabé con mi primer post. FIN\n  \n````\n\n:::\n\n\n\n<br>\n\n\n### Yaml nivel proyecto \n\nEn el fichero `_quarto.yml` se especifican opciones y metadatos que afectaran a todos los documentos del proyecto. En el caso que nos ocupa (un Qproject para crear una web/blog) allí se suelen especificar metadatos acerca de 3 aspectos: \n\n  1. Funcionamiento del Qproject \n  2. Estructura de la web  \n  3. Formato de salida de los documentos \n  \n#### 2.2.1 Funcionamiento del Qproject\n\nEstas opciones acerca del funcionamiento del Qproject, se especifican en el fichero `_quarto.yml` (nivel proyecto).\n\n::: {.cell}\n\n```{.r .cell-code .code-overflow-scroll  code-line-numbers=\"true\"}\n# 1/ Opciones referentes al proyecto ----------------------------\nproject:\n  type: website\n  output-dir: docs    #- podemos cambiar la carpeta donde se redirige el output (.html)\n  # execute-dir: project    #- cambiar el render directory: https://quarto.org/docs/projects/code-execution.html#working-dir\n```\n:::\n\n\n\n\nComo vemos, podemos cambiar:\n\n- la **carpeta** donde se generará el **output del proyecto** (linea 4: output_dir : docs). \n\n- el **directorio en el que se procesan los `.qmd`** (linea 5: execute-dir: project). Los ficheros `.qmd` se procesan habitualmente en el directorio en el que residen pero puedes cambiarlo al directorio principal del proyecto^[Aunque yo no lo haría: estoy muy acostumbrado a que el directorio de trabajo de los `.Rmd` sea la carpeta donde residen]. [Aquí](https://quarto.org/docs/projects/code-execution.html#working-dir) documentación oficial sobre distintos aspectos de los Qprojects y sus opciones de configuración \n\n\n<br>\n\n#### 2.2.2 Estructura de la web \n\n\nYa vimos algunas opciones en el 2º tutorial, veremos algunas más, pero será en el 7º tutorial. Como ejemplo, podríamos modificar esa sección de `_quarto.yml` para dejarla como:\n\n\n::: {.cell}\n\n```{.r .cell-code .code-overflow-scroll  code-line-numbers=\"true\"}\n#- 2/ Opciones referentes a la estructura de la web -----------------\nwebsite:\n  title: \"Mi blog (aún en pruebas)\"\n  favicon: profile.jpg\n  #site-url: https://....\n  #repo-url: https://....\n  open-graph: true #-https://quarto.org/docs/websites/website-tools.html#twitter-cards\n  twitter-card:\n    creator: \"@tu-usuario-twitter\"\n    card-style: summary_large_image\n  navbar:\n    logo: \"profile.jpg\"\n    #background: primary    #- pink\n    right:\n      - text: \"About me\"\n        href: about.qmd\n      - icon: github\n        href: https://github.com/<tu-usuario-github>\n      - icon: twitter\n        href: https://twitter.com/<tu-usuario-twitter>\n      - icon: envelope\n        url: \"mailto:<tu-mail@uv.es>\"\n    left: \n      - icon: house-door\n        href: index.html\n      - text: \"Docencia\"\n        href: docencia.qmd\n  page-footer:\n    left: \"© 2022 Pedro J. Pérez\"\n    center: \"Hecho con [Quarto](https://quarto.org)\"\n    right:\n      - icon: github\n        href: https://github.com/<tu-usuario-github>\n      - icon: twitter\n        href: https://twitter.com/<tu-usuario-twitter>\n      - icon: envelope\n        url: \"mailto:<tu-mail>@uv.es\"\n```\n:::\n\n\n\n\n\nComo ves, se añadirían elementos como:\n\n- Un pie de página (lineas 28 a 37)^[Puedes ver un ejemplo de cómo quedaría el pie de página en la web del taller, [aquí](https://perezp44.github.io/taller.primer.blog/materiales.html)]\n\n- Hemos añadido un elemento a la `navbar` concretamente el icono `Home` (lineas 24 y 25). La documentación oficial para elementos de navegación está [aquí](https://quarto.org/docs/websites/website-navigation.html)\n\n- Elementos de redes sociales como un favicon (linea 4), el url de la web y del repo en Github (lineas 5 y 6) y más elementos de redes sociales  (lineas 7 a 10). La documentación oficial para estos elementos está [aquí](https://quarto.org/docs/websites/website-tools.html)\n\n<br>\n\n#### 2.2.3 Formato de salida de los documentos \n\nEn un blog/web el formato de salida es siempre `.html`; sin embargo podemos especificar otras opciones como por ejemplo sí los documentos (o páginas de la web, o post del blog) tienen un índice flotante, etc..., etc ....\n\n\n::: {.cell}\n\n```{.r .cell-code .code-overflow-scroll  code-line-numbers=\"true\"}\n#- 3/ Opciones referentes al formato de salida  ---------------------\nformat:\n  html:\n    theme: flatly  \n    css: styles.css\n    toc: true\n    highlight-style: a11y\n```\n:::\n\n\n\n<br>\n\n#### Tarea  5.1\n\nBien, una vez hemos repasado las principales opciones referentes a `_quarto.yml`, vamos a incorporar esas modificaciones a nuestro blog.\n\n::: {.callout-important icon=\"false\"}\n#### Tarea 5.1: Modificar `_quarto.yml`\n\n- Tenemos que dejar el archivo `_quarto.yml` así:\n\n::: {.cell}\n\n```{.r .cell-code .code-overflow-scroll  code-line-numbers=\"true\"}\n# 1/ Opciones referentes al proyecto ----------------------------\nproject:\n  type: website\n  output-dir: _site    \n \n#- 2/ Opciones referentes a la estructura de la web -----------------\nwebsite:\n  title: \"Mi blog (aún en pruebas)\"\n  navbar:\n    logo: \"profile.jpg\"\n    #background: primary    #- pink\n    right:\n      - text: \"About me\"\n        href: about.qmd\n      - icon: github\n        href: https://github.com/<tu-usuario-github>\n      - icon: twitter\n        href: https://twitter.com/<tu-usuario-twitter>\n      - icon: envelope\n        url: \"mailto:<tu-mail@uv.es>\"\n    left: \n      - icon: house-door\n        href: index.html\n      - text: \"Docencia\"\n        href: docencia.qmd\n  page-footer:\n    left: \"© 2022 Pedro J. Pérez\"\n    center: \"Hecho con [Quarto](https://quarto.org)\"\n    right:\n      - icon: github\n        href: https://github.com/<tu-usuario-github>\n      - icon: twitter\n        href: https://twitter.com/<tu-usuario-twitter>\n      - icon: envelope\n        url: \"mailto:<tu-mail>@uv.es\"\n\n#- 3/ Opciones referentes al formato de salida  ---------------------\nformat:\n  html:\n    theme: flatly  \n    css: styles.css\n    toc: true\n    highlight-style: a11y          \n```\n:::\n\n\n:::\n\n\n\n\n<br>\n\n### Yaml nivel carpeta\n\nComo ya sabemos, si en una carpeta hay un fichero `_metadata.yml`, todos los documentos `.qmd` que se procesen en esa carpeta se verán afectados por esas opciones. Veamos como tenemos ahora mismo ese archivo.\n\nAbajo el, contenido del fichero `./posts/_metadata.yml` de nuestro blog\n\n![](./imagenes/tt_01/img_24.png){fig-align=\"center\"}\n\n\n\n\n<br>\n\n#### Tarea  5.2\n\nVamos a cambiar un poco el archivo `./posts/_metadata.yml`, simplemente cambiaremos el valor de `freeze: true` a `freeze: auto` lo que hará que cuando hagamos un render global del proyecto, solo se vuelvan a ejecutar los archivos que hayan visto cambiado su contenido, el resto no se volverán a procesar.\n\n\n::: {.callout-important icon=\"false\"}\n#### Tarea 5.2: Modificar `./posts/_metadata.yml` \n\n- Tenemos que dejar el archivo `./posts/_metadata.yml`  así:\n\n\n::: {.cell}\n\n```{.r .cell-code .code-overflow-scroll  code-line-numbers=\"true\"}\n# IMPORTANTE: options specified here will apply to all posts in this folder\n\n# freeze: controla la ejecución de los .qmd durante un global project render\n# https://quarto.org/docs/projects/code-execution.html#freeze)\nfreeze: auto   #- {false, true, auto}\n\n\n#- Quarto incluye un title-block al principio de los artículos con: title, subtitle, authors, date, doi, and abstract.\n\n# title-block-style: modifica el estilo del title-block\n# https://quarto.org/docs/authoring/title-blocks.html\ntitle-block-style: default #- {default, plain, none}\n\n# title-block-banner: pone un banner en el title-block: pondrá el title, subtitle, description, y categories dentro del banner\n# https://quarto.org/docs/authoring/title-blocks.html#title-banners\ntitle-block-banner: true  #- {true, false, \"#FFDDFF\",  \"image.jpg\"}\n\n# tb se puede especificar el color del texto dentro del banner\ntitle-block-banner-color: red\n```\n:::\n\n **IMPORTANTE**: las opciones que especifiques en `_metadata.yml` afectarán a todos los .qmd de la carpeta.\n\n- `freeze (linea 5): {false, true, auto}` controla la ejecución de los .qmd durante el procesado completo del Qproject. Documentación [aquí](https://quarto.org/docs/projects/code-execution.html#freeze).\n\n- `title-block-style (linea 12):  {default, plain, none}`modifica el estilo del title-block\n\n- `title-block-banner (linea 16): {true, false, \"#FFDDFF\",  \"image.jpg\"}` controla la presencia y apariencia de los \"banners\" para dar más importancia a los títulos de los posts. Puedes controlar el color, incluso poner una imagen. Documentación [aquí](https://quarto.org/docs/authoring/title-blocks.html#title-banners). \n\n- `title-block-banner-color(linea 19): {black, \"#FFDDFF\"}` controla el color del título del post\n\n:::\n\n\n\n\n<br>\n\n### Yaml en documento\n\nComo dijimos, también podemos especificar metadatos y opciones para un documento `.qmd` en el encabezamiento del documento. Lógicamente esas opciones sólo afectarán a ese documento. \n\n\n#### Tarea 5.3\n\nProbemos a cambiar el `yaml` o encabezamiento de `./posts/my-primer-post/index.qmd`\n\n::: {.callout-important icon=\"false\"}\n#### Tarea 5.3: Modificar encabezamiento de `./posts/my-primer-post/index.qmd` \n\n- Tenemos que dejar el archivo `./posts/my-primer-post/index.qmd` así:\n\n\n````markdown\n---\ntitle: \"Mi primer post con Quarto\"\nauthor: \"Pedro J. Pérez\"\ndate: \"2022-10-25\"\ncategories: [R, quarto]\n---\n\nEste es mi **primer post** con Quarto!!!!\n\n```{{r}}\nsqrt(2 + 2)\n```\n\nVoy a poner una imagen:\n\n![](thumbnail.jpg)\n\nAcabé con mi primer post. FIN\n  \n````\n\n- Sustituye `thumbnail.jpg` por otro archivo\n\n\n- Vuelve a regenerar el blog: `Build > Render Website`\n:::\n\n\n\n\n\n<br>\n\n## Texto\n\nEl texto (o narrativa) de un documento `.qmd` se escribe, al igual que en los documentos `.Rmd` en `markdown`. [Aquí](https://quarto.org/docs/authoring/markdown-basics.html) la documentación oficial de Quarto.\n\n\nNo lo vamos a practicar ahora. Lo haremos (un poco) luego cuando hagamos un post de ejemplo.\n<br>\n\n### Sintaxis básica de `markdown`\n\n-  [Aquí](https://quarto.org/docs/authoring/markdown-basics.html) puedes ver o recordar la sintaxis básica, las principales reglas para escribir en `markdown`.\n\n- Como ejemplo:\n\n::: { layout-ncol=1}\n![](./imagenes/tt_01/img_20_markdown.png){fig-align=\"center\"}\n\n:::\n\n\n\n\n\n<br>\n\n### Más elementos para \"escribir\" \n\nAdemás de los elementos de escritura que nos ofrece la sintaxis básica de `markdown`. Quarto nos ofrece más posibilidades, veamos algunas de ellas:\n\n- Links (documentación [aquí](https://quarto.org/docs/authoring/markdown-basics.html#links-images))\n\n- Imágenes (documentación [aquí](https://quarto.org/docs/authoring/figures.html)) y sus [opciones](https://quarto.org/docs/computations/execution-options.html#figure-options)\n\n- Listas  (documentación [aquí](https://quarto.org/docs/authoring/markdown-basics.html#lists))  \n\n- Tablas  (documentación [aquí](https://quarto.org/docs/authoring/markdown-basics.html#tables))  \n\n- Código  (documentación [aquí](https://quarto.org/docs/authoring/markdown-basics.html#source-code))  \n\n- Ecuaciones  (documentación [aquí](https://quarto.org/docs/authoring/markdown-basics.html#equations))    \n\n\n- Callout blocks  (documentación [aquí](https://quarto.org/docs/authoring/markdown-basics.html#callout-blocks))  \n\n- Divs & spans  (documentación [aquí](https://quarto.org/docs/authoring/markdown-basics.html#divs-and-spans))  \n\n\n<br>\n\n\nEl [editor visual](https://www.rstudio.com/blog/exploring-rstudio-visual-markdown-editor/) facilita la introducción de estos elementos en tus documentos.\n\n\n<br>\n\n## Chunks de código\n\n\nLos *chunks* de código en `.qmd` también tienen un **comportamiento similar** a lo que ocurría en los chunks en documentos `.Rmd`. La documentación oficial está [aquí](https://quarto.org/docs/computations/execution-options.html)\n\n### Diferencias con .Rmd\n\nLas **principales diferencias** son:\n\n- En `.Rmd` las opciones de los chunks se podían especificar de forma global en un chunk inicial (generalmente llamado setup) y a nivel individual en cada uno de los chunks; mientras que ahora, con `.qmd`, **las opciones de los chunks se pueden especificar globalmente en el YAML** y a nivel individual en cada uno de los chunks.\n\n::: {.callout-warning collapse=\"true\" appearance=\"default\" icon=\"false\"}\n#### Extensiones: mi setup chunk\nCuando usaba `.Rmd` este era habitualmente mi chunk de setup\n\n![](./imagenes/tt_01/img_21.png){fig-align=\"center\"}\n\n:::\n\n\n\n\n\n- En los **chunks individuales** ahora se se utiliza la **sintaxis YAML** (`key: value`) en lineas dentro del chunk que empiezan con `#|`. Por ejemplo:\n\n![](./imagenes/tt_01/img_22.png){fig-align=\"center\"}\n\n\n- Las principales opciones son: **echo**, **eval**, **warning**, **error**, **output** e **include**. [Aquí](https://quarto.org/docs/computations/execution-options.html#output-options) la documentación oficial.\n\n\n- `echo`, además los típicos true y false, ahora incorpora un nuevo valor `fenced` que facilita mostrar las marcas de los chunks en el documento final. Documentación [aquí](https://quarto.org/docs/computations/execution-options.html#fenced-echo). Los llamados **unexecuted Blocks**, documentación [aquí](https://quarto.org/docs/computations/execution-options.html#unexecuted-blocks), también facilitan mostrar las marcas de los chunks en el documento de salida.\n\n- Además, si usamos `knitr` para ejecutar los chunks, entonces podemos usar todas las [opciones nativas de `knitr`](https://yihui.org/knitr/options/), como: collapse, fig.width, comment, etc ... Más información [aquí](https://quarto.org/docs/computations/execution-options.html#knitr-options). Un ejemplo:\n\n![](./imagenes/tt_01/img_23.png){fig-align=\"center\"}\n\n<br>\n\n### Más opciones para los chunks\n\nLa documentación oficial la tienes [aquí](https://quarto.org/docs/output-formats/html-code.html).\n\n- Puedes hacer `folding code`\n\n\n::: {.cell}\n\n````{.cell-code  code-fold=\"true\" code-summary=\"Muéstrame el código\"}\n```{{r, eval = FALSE}}\n#| code-fold: true #- {true, false, show}\n#| code-summary: \"Muéstrame el código\"\n2 + 2\n```\n````\n:::\n\n\n- Si el código es muy largo, puedes usar  `code-overflow: wrap`  y `code-overflow: scroll` \n\n\n\n::: {.cell}\n\n````{.cell-code .code-overflow-wrap}\n```{{r, eval = FALSE}}\n#| code-overflow: wrap\n2 + 2  +2 + 2 + 2 + 2  +2 + 2 + 2 + 2  + 2 + 2 + 2 + 2  + 2 + 2 + 2 + 2  + 2 + 2 + 2 + 2  +2 + 2\n```\n````\n:::\n\n\n- Puedes hacer que se muestre el número de linea\n\n\n\n::: {.cell}\n\n````{.cell-code  code-line-numbers=\"true\"}\n```{{r, eval = FALSE}}\n#| code-line-numbers: true\n2 + 2 \n4 + 4\n```\n````\n:::\n\n\n\n\n\n<br>\n\n## Layout \n\nAdemás de yaml, texto y chunk, para escribir con Quarto conviene conocer la estructura o layout de los artículos que se generan con él. Las páginas tienen un body, un margin y un área para las sidebars, que en nuestro caso contiene un TOC^[Además, el layout puede venir afectado por la opción `page-layout: custom   #- {article, full, custom}`. Documentación oficial [aquí](https://quarto.org/docs/output-formats/page-layout.html) ].  Documentación oficial [aquí](https://quarto.org/docs/authoring/article-layout.html).\n\nPara ver las distintas posibilidades que tenemos, insertaremos una imagen ocupando distintas áreas del artículo. Empezaremos situando la imagen en el margen. para ello habría que hacer lo siguiente: \n\n```\n::: {.column-margin}\n\n![](imagenes/my_layout-01.png){fig-align=\"center\"}\n\n:::\n```\n\n::: {.column-margin}\n![](imagenes/my_layout-01a.png){fig-align=\"center\"}\n:::\n\n:::{.column-body}\n![](imagenes/my_layout-02a.png){fig-align=\"center\"}\n:::\n\n\n\n:::{.column-body-outset}\n![](imagenes/my_layout-03.png){fig-align=\"center\"}\n:::\n\n\n:::{.column-page-inset}\n![](imagenes/my_layout-04.png){fig-align=\"center\"}\n:::\n\n\n:::{.column-page}\n![](imagenes/my_layout-05.png){fig-align=\"center\"}\n:::\n\n\n::: {.column-screen-inset}\n![](imagenes/my_layout-06.png){fig-align=\"center\"}\n:::\n\n\n::: {.column-screen}\n![](imagenes/my_layout-07.png){fig-align=\"center\"}\n:::\n\n\n<br>\n\n\n\n\nEl output de los chunks también puede ocupar distintas áreas. Veamos  si un leaflet se puede poner en el margen:\n\n\n\n::: {.cell .column-margin}\n\n````{.cell-code}\n```{{r}}\n#| column: margin\nlibrary(leaflet)\nleaflet() %>%\n  addTiles() %>%  # Add default OpenStreetMap map tiles\n  addMarkers(lng=174.768, lat=-36.852, popup=\"The birthplace of R\")\n```\n````\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-b9a608626a6b6e49d689\" style=\"width:100%;height:464px;\" class=\"leaflet html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-b9a608626a6b6e49d689\">{\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"addTiles\",\"args\":[\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",null,null,{\"minZoom\":0,\"maxZoom\":18,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"attribution\":\"&copy; <a href=\\\"https://openstreetmap.org\\\">OpenStreetMap<\\/a> contributors, <a href=\\\"https://creativecommons.org/licenses/by-sa/2.0/\\\">CC-BY-SA<\\/a>\"}]},{\"method\":\"addMarkers\",\"args\":[-36.852,174.768,null,null,null,{\"interactive\":true,\"draggable\":false,\"keyboard\":true,\"title\":\"\",\"alt\":\"\",\"zIndexOffset\":0,\"opacity\":1,\"riseOnHover\":false,\"riseOffset\":250},\"The birthplace of R\",null,null,null,null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]}],\"limits\":{\"lat\":[-36.852,-36.852],\"lng\":[174.768,174.768]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n<br>\n\n\nY ahora ocupando toda la pantalla:\n\n\n::: {.cell .column-screen}\n\n````{.cell-code}\n```{{r}}\n#| column: screen\nlibrary(leaflet)\nleaflet() %>%\n  addTiles() %>%  # Add default OpenStreetMap map tiles\n  addMarkers(lng=174.768, lat=-36.852, popup=\"The birthplace of R\")\n```\n````\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-32b59c56a25289c6b5f5\" style=\"width:100%;height:464px;\" class=\"leaflet html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-32b59c56a25289c6b5f5\">{\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"addTiles\",\"args\":[\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",null,null,{\"minZoom\":0,\"maxZoom\":18,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"attribution\":\"&copy; <a href=\\\"https://openstreetmap.org\\\">OpenStreetMap<\\/a> contributors, <a href=\\\"https://creativecommons.org/licenses/by-sa/2.0/\\\">CC-BY-SA<\\/a>\"}]},{\"method\":\"addMarkers\",\"args\":[-36.852,174.768,null,null,null,{\"interactive\":true,\"draggable\":false,\"keyboard\":true,\"title\":\"\",\"alt\":\"\",\"zIndexOffset\":0,\"opacity\":1,\"riseOnHover\":false,\"riseOffset\":250},\"The birthplace of R\",null,null,null,null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]}],\"limits\":{\"lat\":[-36.852,-36.852],\"lng\":[174.768,174.768]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n\n\n<br>\n\nComo no puede ser de otro modo, aún hay más opciones para el layout. Documentación [aquí](https://quarto.org/docs/authoring/article-layout.html#overflowing-content)\n\n<br>\n\n\n## Resumen\n\n::: {.callout-note collapse=\"true\" appearance=\"default\" icon=\"false\"}\n#### Resumen (tutorial nº 5)\n\n- La **quinta parte del taller** se ocupa de la **escritura de posts** para el blog. \n\n- Los posts **se han de escribir en formato `.qmd`**; por lo tanto, se repasan  los fundamentos \"teóricos\" necesarios para escribir este tipo de documentos.\n\n- Nos apoyamos en nuestro **conocimiento previo de la sintaxis Rmarkdown**.\n\n- Se repasan las posibilidades de configurar los documentos por medio de **los 3 YAML's** que pueden afectar a un documento.\n\n-  **Los 3 YAML's** son: Nivel proyecto (`_quarto.yml`), nivel carpeta (`_metadata.yml`) y nivel documento (en el propio encabezamiento del archivo)\n\n- El **texto** en ficheros `.qmd` es muy similar al de los documentos `.qmd`. Aparecen algunos elementos nuevos como los Call-outs.\n\n- El **código** sí presenta novedades: nueva sintaxis con `#|` y posibilidad de determinar opciones en el YAML.\n\n- Repasamos también algunas de las opciones de **layout**.\n\n- Para poder escribir en `.qmd` **hay que practicar**. Vamos a ello\n\n:::\n\n\n\n<br>\n\n----------------------\n\n<br>\n\n\n\n## Práctica\n\nEn esta sección dedicaremos un tiempo a la práctica libre para que practiques la creación y escritura de un post. Para ello te ofrezco la siguiente plantilla para elaborar un post con diferentes elementos:\n\n- Añadir una nueva página a la web (`quarto.yml`)\n\n::: {.callout-tip collapse=\"true\" appearance=\"default\" icon=\"false\"}\n\n#### Práctica 3.1: añadir una página más a nuestra web (`_quarto.yml`)\n\nEvidentemente puedes probar a añadir la página que quieras, pero te ofrezco la siguiente posibilidad:\n\n- Crear una página llamada \"Más cosas\" que tenga la particularidad de que cuando recreemos el blog se convertirá en un desplegable con acceso a varias páginas: \"Docencia 2\", \"Docencia 3\" y \"Docencia 4\".\n\n- Fíjate que he puesto la nueva página a la izquierda (`left: `)\n\n- Además, puedes probar distintas opciones de `theme` y de `highlighting`\n\n\n```yaml\nproject:\n  type: website\n\nwebsite:\n  title: \"Mi blog (aún en pruebas)\"\n  navbar:\n    logo: \"profile.jpg\"\n    #background: primary    #- pink (el backgroung de la navbar)\n    left: \n      - text: \"Docencia\"\n        href: docencia.qmd\n      - text: \"Más cosas\"\n        menu:\n          - text: \"Docencia 2\"\n            href: docencia.qmd\n          - text: \"Docencia 3\"\n            href: docencia.qmd\n          - text: \"---\"\n          - text: \"Docencia 4\"\n            href: docencia.qmd\n    right:\n      - about.qmd\n      - icon: github\n        href: https://github.com/<tu-usuario-github>\n      - icon: twitter\n        href: https://twitter.com/<tu-usuario twitter>\n      - icon: envelope\n        url: \"mailto:<tu-mail@uv.es>\"\n \n\nformat:\n  html:\n    #- https://quarto.org/docs/output-formats/html-themes.html\n    theme: flatly  \n    css: styles.css\n    toc: true\n    #- https://quarto.org/docs/output-formats/html-code.html#highlighting\n    highlight-style: a11y\n```\n:::\n\n\n\n\n\n- Modificar la apariencia del blog jugando con las opciones que nos proporciona Quarto (`index.qmd`)\n\n::: {.callout-tip collapse=\"true\" appearance=\"default\" icon=\"false\"}\n\n#### Práctica 3.2: Modificar la **apariencia del blog** (`index.qmd`)\n\n- Se trata de cambiar las opciones predefinidas de tu archivo **index.qmd**\n\n- Con ello podremos cambiar la **apariencia del listado de posts**\n\n- Para ello tienes que ir jugando con las opciones que nos ha proporcionado la plantilla de Quarto en el fichero `index.qmd`. \n\n- la YAML inteligence te ayudará!! (vamos el autocompletado en el YAML)\n\n![](./imagenes/tt_01/img_12v.png){fig-align=\"center\"}\n\n:::\n\n\n\n\n\n- Modificar la apariencia de la página About (`about.qmd`)\n\n::: {.callout-tip collapse=\"true\" appearance=\"default\" icon=\"false\"}\n\n#### Práctica 3.3: Modificar la **página About** (`about.qmd`)\n\n- Se trata de cambiar las opciones predefinidas de tu archivo **about.qmd**\n\n- Estaría bien que pusieses una foto tuya\n\n- Puedes poner texto y dar algo de formato a la página\n\n\n::: {layout=\"[45,-10,45]\"}\n\n\n![](./imagenes/tt_01/img_12_aa.png){fig-align=\"center\"}\n\n::: {.cell}\n\n```{.yaml .cell-code}\n---\ntitle: Yo mismo\nimage: profile.jpg\nabout:\n  template: trestles    #- {jolla, solana, ...}\n  image-width: 10em     #- https://cybmeta.com/em-y-rem\n  image-shape: round    #- rectangle, round, rounded\n  links:\n    - icon: twitter\n      text: Twitter\n      href: https://twitter.com\n    - icon: linkedin\n      text: LinkedIn\n      href: https://linkedin.com\n    - icon: github\n      text: Github\n      href: https://github.com\n---\n\n```\n:::\n\n\n:::\n\n\n:::\n\n\n\n\n\n\n\n\n## Un ejemplo\n\nUsaremos un ejemplo para **practicar la sintaxis y nuevas posibilidades de Quarto** a la hora de generar documentos `.html`: o sea, para escribir posts para nuestro blog.\n\nIncorporaremos los siguientes elementos:\n\n- Link interno a las  [slides de introducción](01_taller_slides.qmd)\n\n- Create a tabset via a markdown div with the class name panel-tabset (e.g. ::: {.panel-tabset}) <https://quarto.org/docs/output-formats/html-basics.html#tabsets>\n\n- Bilio (.csl, .bib, lin-citations: yes). LatinR 1:09  R.version.string <https://www.youtube.com/watch?v=d8jSN998Mtw>\n\n- [Videos](https://quarto.org/docs/authoring/videos.html) \n\n\n-Extensiones\n\n\n\n#### Divs y Spans\n\n\n- [Divs y Spans](https://quarto.org/docs/authoring/markdown-basics.html#divs-and-spans)\n\n::: {.border}\nThis content can be styled with a border\n\n:::\n\n``` markdown\n:::{.callout-note}\nNote that there are five types of callouts, including: \n`note`, `tip`, `warning`, `caution`, and `important`.\n:::\n```\n\n\n\n``` markdown\n[This is *some text*]{.class key=\"val\"}\n```\n\n\n#### Call-outs\n\n[Call-outs bervatim](https://github.com/quarto-dev/quarto-web/blob/main/docs/authoring/markdown-basics.qmd)\n\n``` markdown\n:::{.callout-note}\nNote that there are five types of callouts, including: \n`note`, `tip`, `warning`, `caution`, and `important`.\n:::\n```\n### Inline\n\n-  para inline has de `` `r ` ``.\n\n<br>\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../site_libs/htmlwidgets-1.5.4/htmlwidgets.js\"></script>\n<script src=\"../site_libs/jquery-1.12.4/jquery.min.js\"></script>\n<link href=\"../site_libs/leaflet-1.3.1/leaflet.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/leaflet-1.3.1/leaflet.js\"></script>\n<link href=\"../site_libs/leafletfix-1.0.0/leafletfix.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/proj4-2.6.2/proj4.min.js\"></script>\n<script src=\"../site_libs/Proj4Leaflet-1.0.1/proj4leaflet.js\"></script>\n<link href=\"../site_libs/rstudio_leaflet-1.3.1/rstudio_leaflet.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/leaflet-binding-2.1.1/leaflet.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}