{
  "hash": "fc477a7568af6956f101939652b5293b",
  "result": {
    "markdown": "---\ntitle: \"Escribiendo posts: practicando con Quarto (5ª parte del taller)\"\nauthor: \"Pedro J. Pérez\"\ndate: 2022-10-10\ndate-format: short\nformat: \n  html:\n    theme: minty  #- https://quarto.org/docs/output-formats/html-themes.html\n    #-https://quarto.org/docs/websites/website-blog.html#themes\n    backgroundcolor: \"#F1F3F4\"\n    toc: true\n    toc-depth: 3\n    toc-location: left\n    smooth-scroll: true\n    embed-resources: true  #self-contained: true \n    #standalone: true  \n    link-external-icon: false\n    link-external-newwindow: true\n    html-math-method: katex\n    citations-hover: false\n    footnotes-hover: false\n    css: assets/styles.css\ncomments:\n  hypothesis: \n    theme: clean\n---\n\n::: {.callout-note collapse=\"true\" appearance=\"default\" icon=\"false\"}\n#### Contexto\n\n-  Tutorial preparado para el taller **Mi primer blog con Quarto** impartido en Córdoba (Spain) durante el [I Congreso & XII Jornadas de Usuarios de R](http://r-es.org/12jr/), 23-25 de noviembre de 2022.\n-   El taller está pensado para realizar con [R](https://cran.r-project.org/). Se utilizará el IDE [RStudio](https://www.rstudio.com/products/rstudio/) y [Quarto](https://quarto.org/). Se recomienda tener instaladas **versiones recientes** de los 3 programas\n\n- Este tutorial es sólo una parte del taller. El **taller completo** está [aquí](https://perezp44.github.io/taller.primer.blog/).\n:::\n\n\n\n\n\n::: {.callout-note collapse=\"true\" appearance=\"default\" icon=\"false\"}\n## Recapitulación\n\n-   En esta quinta parte del taller veremos como escribir nuestros posts con Quarto.\n\n-   Las anteriores secciones del taller son:\n\n    1. **Intro**: se presenta el taller\n\n    2. **Creación de un blog (básico) con Quarto**: en la segunda parte del taller vimos como crear y alojar un **blog básico** con RStudio y Quarto.\n    \n    3. **Tuneado básico del blog**. Modificamos ligeramente los ficheros `_quarto.yml`, `index.qmd`, `about.qmd` y `styles.css`.\n    \n    4. **Workflow: ¿cómo crear un post?**. Vimos como generar nuevos posts para nuestro blog.\n:::\n\n<br>\n\n------------------------------------------------------------------------\n\n<br>\n\n::: {.callout-tip  appearance=\"default\" icon=\"false\"}\n## ¿Qué haremos en este tutorial?\n\n- Ver como escribir nuestro posts con Quarto, con ficheros `.qmd`\n\n- En concreto veremos: yaml, texto, chunks\n\n- Aprender a utilizar algunos truquillos de Quarto\n:::\n\n\n<br>\n\nEn el tutorial anterior aprendimos a generar nuevos post para nuestro blog. Ahora **aprenderemos a escribir esos post**; veremos las **posibilidades que nos ofrece Quarto** a la hora de escribir y formatear nuestros posts. \n\n::: {.callout-warning  appearance=\"default\" icon=\"true\"}\n\nVoy a suponer que los asistentes al taller y posible lectores de estos tutoriales conocen y han escrito algún documento en Rmarkdown. En ese caso, el paso de `.Rmd` a `.qmd` es sencillo. En cualquier caso, [aquí](https://quarto.org/docs/faq/rmarkdown.html) tienes unas FAQ's para usuarios de .Rmd que se preguntan si pasarse a Quarto.\n\nAquellos que no sepan qué es Rmarkdown pueden empezar por [aquí](https://perezp44.github.io/intro-ds-22-23-web/tutoriales/tt_07_Rmarkdown.html) o [aquí](https://perezp44.github.io/intro-ds-22-23-web/slides/slides_07_rmarkdown.html#1).\n\n:::\n\n## 1. Escribiendo con Quarto\n\nEn el tutorial anterior creamos un nuevo post en la carpeta `./posts/my-primer-post/`. En realidad ese post es idéntico al primero (`welcome`) ya que sencillamente hicimos un copy-paste. Ahora sí que vamos a modificar el contenido (yaml/texto/chunks) del post para aprender algunos truquillos sobre Quarto.\n\nYa sabemos que la carpeta `./posts/my-primer-post/` contiene dos archivos. El importante es `index.qmd` que es el archivo que genera el post. Veámoslo:\n\n\n::: {layout-ncol=1}\n\n![Contenido del fichero `index.qmd` de nuestro tercer post.](./imagenes/tt_01/img_19.png){fig-align=\"center\"}\n:::\n\n\nLos ficheros `.qmd` tienen 3 partes: yaml, texto y chunks. Vamos a verla una a una.\n\n## El `yaml`\n\nEl encabezamiento o **YAML**, se utiliza para fijar determinadas opciones y metadatos de nuestro documento^[El `yaml` será  procesado varias veces durante el procesado del documento: es leído por Quarto, knitr y Pandoc e influirá en el resultado final, pudiendo afectar al código, al contenido y al procesado del documento].\n\nUna idea importante a recordar es que estamos trabajando con un **Qproject**. Trabajar con un Qproject tiene ventajas^[Puedes ver la documentación oficial de Quarto sobre proyectos [aquí](https://quarto.org/docs/projects/quarto-projects.html)], entre ellas:\n\n- poder procesar todos los archivos con un solo comando: `quarto render <myproject>`\n\n- la posibilidad de \"freeze rendered output\"\n\n- la posibilidad de redireccionar los documentos de salida (output) a otro directorio\n\n- posibilidad de compartir la configuración del YAML para múltiples documentos. Los metadatos compartidos se pueden definir tanto a nivel de proyecto como a nivel de directorio.\n\n\nEsta última ventaja, la posibilidad de **compartir opciones de metadatos YAML en varios documentos**, es importante ahora, porque nos da diferentes posibilidades para especificar el YAML de nuestros documentos o posts.\n\n### `ymal` de un post\n\nEn un post se pueden especificar opciones YAML de 3 formas/niveles:\n\n1. En el yaml del propio post (nivel documento)\n2. En el fichero `./posts/_metadata.yml` (nivel carpeta)\n3. En el fichero `./_quarto.yml` (nivel proyecto)\n\nLos posibles 3 yaml's se fusionan en el momento de procesar cada archivo `.qmd`. Si hay conflictos prevalece las opciones del nivel documento, luego nivel carpeta y finalmente nivel proyecto.\n\n[Aquí]() puedes encontrar las opciones que se pueden fijar con el `yaml`, pero creo que la forma más operativa para el taller es mostrar ejemplos de ficheros yaml.`\n\nhtml: <https://quarto.org/docs/output-formats/html-basics.html>\nhtml-options: <https://quarto.org/docs/reference/formats/html.html>\n\n\n::: {.panel-tabset}\n\n### nivel documento\n\n```yaml\n---\n---\ntitle: \"Mi primer post (luchando con Quarto)\"\nauthor: \"Pedro J. Pérez\"\ndate: \"11 octubre, 2022\"\ndraft: false\nformat: \n  html:\n    theme: minty  #- https://quarto.org/docs/output-formats/html-themes.html\n    #-https://quarto.org/docs/websites/website-blog.html#themes\n    backgroundcolor: \"#F1F3F4\"\n    toc: true\n    toc-depth: 3\n    toc-location: left\n    number-sections: false\n    number-depth: 3\n    smooth-scroll: true\n    embed-resources: true  #self-contained: true \n    #standalone: true  \n    link-external-icon: false\n    link-external-newwindow: true\n    html-math-method: katex  #- default: LaTeX eq rendered using MathJax\n    citations-hover: false\n    footnotes-hover: false\n    css: assets/styles.css\ncomments:\n  hypothesis: \n    theme: clean\n---\n\n\n\n---\ntitle: \"My document\"\nformat:\n  html:\n    toc: true\n    html-math-method: katex\n    css: styles.css\n---\n```\n\n\n### nivel carpeta\n\n\n### nivel proyecto\n\n:::\n\n\n\n\n- todos los Qprojects contienen un archivo de configuración  llamado `_quarto.yml`: todo documento que se procese (render) dentro del directorio del proyecto heredará automáticamente los metadatos definidos en `_quarto.yml`.\n\n\n## Modificando el texto\n\n## Chunks de código\n\n\n## Extras\n\n- Create a tabset via a markdown div with the class name panel-tabset (e.g. ::: {.panel-tabset}) <https://quarto.org/docs/output-formats/html-basics.html#tabsets>\n\n\n<br>\n\n## Resumen\n\n::: {.callout-tip collapse=\"true\" appearance=\"default\" icon=\"false\"}\n#### Resumen\n\n- En esta cuarta parte del taller hemos visto como podemos generar/escribir nuevos posts para nuestro blog: solo hay replicar una de las carpetas de anteriores posts y cambiarle el nombre.\n\n:::\n\n\n\n\n\n<br>\n\n\n## Referencias\n\n(Algunos artículos sobre creación de blogs en Quarto)\n\n- [ Eric Ekholm. 2022. Modifying the Default Quarto Blog Structure](https://www.ericekholm.com/posts/demo-quarto-site/)  es una web con blog . GOOOOD\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}