{
  "hash": "4b4cef360937d44c89989bb3ea647253",
  "result": {
    "markdown": "---\ntitle: \"Creación de un blog básico con Quarto\"\nsubtitle: \"(2ª parte del taller [Mi primer blog con Quarto](https://perezp44.github.io/taller.primer.blog/))\"\n#abstract: \"En este tutorial, vamos a ver el **proceso de creación** y la **estructura de ficheros** de un blog creado con Quarto de forma rápida. Alojaremos el blog en [Quarto Pub](https://quartopub.com). Será un blog básico pero completamente operativo. Ya tendremos tiempo de mejorarlo, o tunearlo, en las siguientes secciones del taller.\"\ntoc-title: Tutorial nº 2\n---\n::: {.callout-note collapse=\"true\" appearance=\"default\" icon=\"false\"}\n#### Contexto\n\n-  Tutorial preparado para el taller **Mi primer blog con Quarto** impartido en Córdoba (Spain) durante el [I Congreso & XII Jornadas de Usuarios de R](http://r-es.org/12jr/), 23-25 de noviembre de 2022.\n-   El taller está pensado para realizar con [R](https://cran.r-project.org/). Se utilizará el IDE [RStudio](https://www.rstudio.com/products/rstudio/) y [Quarto](https://quarto.org/). Se recomienda tener instaladas **versiones recientes** de los 3 programas\n\n- Este tutorial es sólo una parte del taller. El **taller completo** está [aquí](https://perezp44.github.io/taller.primer.blog/).\n:::\n\n\n\n\n\n------------------------------------------------------------------------\n\n::: {.callout-tip collapse=\"false\" appearance=\"default\" icon=\"false\"}\n## ¿Qué haremos en este tutorial?\n\n- Veremos de forma rápida el  **proceso de creación** y la **estructura de ficheros** de un blog creado con Quarto. \n\n- Alojaremos el blog en [Quarto Pub](https://quartopub.com). \n\n- Será un blog básico pero completamente operativo. Ya tendremos tiempo de mejorarlo, o tunearlo, en las siguientes secciones del taller.\n:::\n\n::: {.callout-warning collapse=\"false\" appearance=\"default\" icon=\"false\"}\n\n#### Hay 3 formas de seguir el tutorial\n\nA) La forma recomendada: utilizando Quarto a través de **RStudio**\n\nB) Utilizar Quarto desde la **Terminal** y usar tu editor favorito (VScode ...)\n\nC) Utilizar **RStudio Cloud**\n:::\n\n\n\n\n<br>\n\n## Creación de la carpeta (o Qproject) que contendrá nuestro blog\n\nEl primer paso para crear nuestro blog es crear el proyecto (o carpeta) donde se alojarán los ficheros que necesitemos para nuestro blog.\n\nVamos a  crear el blog con Quarto pero interactuando con él a través de **RStudio**. Desde RStudio crearemos un **Quarto Project**^[Trabajar con Quarto projects tiene algunas ventajas, puedes verlas [aquí](https://quarto.org/docs/projects/quarto-projects.html)], concretamente un Quarto project prediseñado para crear blogs.\n\n#### Tarea 2.1\n\n::: {.callout-important icon=\"false\"}\n#### Tarea 2.1: Creación de la carpeta que contendrá nuestro blog (3 formas de hacerlo)\n\n\n###### A) Crear la carpeta (o Qproject) desde **RStudio**\n\n-   En RStudio sigue la siguiente ruta de menús:   \n\n    `File > New Project > New Directory > Quarto Blog`\n\n- Al hacerlo se creará una carpeta, un Qproject, con todo lo necesario para crear un blog.\n\n-   El nombre que le he puesto a la carpeta/Qproject es `blog_prueba_00`\n\n<br>\n\n###### B) Crear la carpeta desde la **Terminal**\n\n- Has de ejecutar `quarto create-project blog_prueba_00 --type website --template blog` en la Terminal\n\n<br>\n\n###### C) Usando un Qproject creado con **RStudio Cloud**\n\n- Tienes que ir [aquí](https://rstudio.cloud/content/4743159). Se abrirá Rstudio con un Qproject llamado `blog_prueba_00`.\n\n- Has de tener cuenta en [RStudio Cloud](https://rstudio.cloud/). Haz una copia permanente y trabaja sobre ella\n\n:::\n\n\n\n\n<br>\n\n\nDe momento aún no tenemos el blog, solo hemos creado una carpeta/Qproject pero, ya tenemos, dentro de la carpeta, la **estructura de carpetas y archivos** necesarios para crearlo.\n\nCuando creemos el blog, será un blog sencillito, vamos con lo mínimo, pero un blog. \n\nAntes de crear el blog hagamos un pequeño repaso al contenido del Qproject, veamos su estructura de carpetas y archivos.\n\n<br>\n\n## Contenido del Qproject\n\nEl Qproject que acabamos de crear y que permitirá crear el blog tiene esta **estructura de archivos y carpetas**:\n\n::: { layout-ncol=1}\n![](./imagenes/tt_01/img_01.png){fig-align=\"center\"}\n\n:::\n\n\n\n\nComo ves en la figura anterior, el Qproject contiene **6 archivos y una subcarpeta**. Voy a dividirlos en dos categorías:   \n\n  1) los que no son importantes (al menos ahora mismo)  \n    \n  2) Los que **sí son importantes** ahora mismo, serán **3 archivos**  \n\n<br>\n\n### Archivos \"no importantes\"\n\n::: {layout-ncol=2}\n\n1) El archivo `blog_prueba_00.Rproj`\n\nNo es un archivo importante para el blog. Este archivo simplemente permite que RStudio reconozca la carpeta `blog_prueba_00` como un Qproject.\n:::\n\n\n::: {layout-ncol=2}\n2) El archivo `styles.css`\n\nSí será un archivo importante, pero lo veremos más adelante. Este archivo permitirá mediante CSS cambiar la estética de nuestro blog. \n:::\n\n\n\n::: {layout-ncol=2}\n3) El archivo `profile.jpg`\n\nEs sencillamente una foto. La tendremos que sustituir por una foto nuestra en la que estemos guapetes.\n:::\n\n\n::: {layout-ncol=2}\n4) La carpeta  `posts`\n\nSerá muy importante, pero la veremos más adelante. Esta carpeta es la que contendrá los posts que vayamos escribiendo.\n:::\n\n\n\n::: {.callout-warning collapse=\"true\" appearance=\"default\" icon=\"false\"}\n#### Extensiones: el contenido de la carpeta `/posts/`\n\nEn la carpeta `/posts/` hay un archivo de configuración (`_metadata.yml`) y una subcarpeta para cada post. Ahora mismo nuestro blog solo tiene 2 posts. La carpeta de cada post es similar: tiene 2 archivos que veremos más adelante.\n\n::: {layout-ncol=2}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Dentro de la carpeta `posts`](./imagenes/tt_01/img_02.png){width=247}\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![Dentro del post `welcome`](./imagenes/tt_01/img_03.png){width=286}\n:::\n:::\n\n\n:::\n\n:::\n\n\n\n\n<br>\n\n### Archivos  sí importantes\n\nNos quedan 3 archivos que será en los que nos concentraremos en este tutorial:\n\n\n::: {layout-ncol=2}\n\n1) `_quarto_yml`\n\nEs el archivo que especifica como será la estructura y apariencia de nuestro blog.\n:::\n\n\n\n::: {layout-ncol=2}\n\n2) `about.qmd`\n\nUn archivo `.qmd` que generará el archivo `about.html` y que será una de las páginas de nuestro blog; precisamente en esta página se verá nuestra foto.\n:::\n\n\n::: {layout-ncol=2}\n\n3) `index.qmd`\n\nOtro archivo `.qmd` que generará el archivo `index.html` y que será la \"landing page\" o **Home** de nuestro blog.\n:::\n\n\n\n## Creación del blog\n\nEl Qproject que hemos creado tiene todo lo necesario para crear un blog, pero aún no lo hemos creado. Para crearlo solo tienes que: \n\n#### Tarea 2.2\n\n::: {.callout-important icon=\"false\"}\n#### Tarea 2.2: Generación del blog\n\n-   Ir al cuadrante superior-derecha de RStudio, pinchar en la pestaña `Build` y pinchar en `Render Website`.\n\n- De esta forma, se procesarán los archivos del Qproject y se creará el blog.\n\n- Podremos verlo en el cuadrante inferior-derecha de RStudio, concretamente en la pestaña `Viewer`.\n:::\n\n\n\n\n\nSi todo ha ido bien, verás algo como esto en RStudio:\n\n::: {#fig-02 layout-ncol=2}\n![](./imagenes/tt_01/img_04.png){fig-align=\"center\"}\n\nAl pinchar en `Render Website` se creará el blog\n:::\n\n\n- Puedes ver [aquí](https://pjperez.quarto.pub/blog_prueba_00/), como quedaría el blog una vez alojado en internet.\n\n<br>\n\n::: {.callout-warning collapse=\"true\" appearance=\"default\" icon=\"false\"}\n#### Extensiones: formas alternativas de generar el blog\n\n- También podríamos haber generado el blog usando la Consola o la **Terminal** desde RStudio. \n\n- En ambos casos hay que estar en el Qproject \"blog_prueba_00\"; es decir, \"blog_prueba_00\" es el working directory\n\n- Desde la **Terminal**\n\n  ::: {.cell}\n  \n  ```{.bash .cell-code  code-fold=\"false\"}\n  quarto render\n  ```\n  :::\n  \n- desde la **Consola** de R\n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code  code-fold=\"false\"}\n  install.packages(\"quarto\")\n  quarto::quarto_render(\"index.qmd\")\n  ```\n  :::\n\n:::\n\n\n\n\n\n<br>\n\n\n## Veamos otra vez la estructura de carpetas\n\nTras haber creado el blog, la estructura de carpetas de nuestro Qproject ha cambiado, concretamente **se han generado 2 subcarpetas**. Veámoslo:\n\n\n\n::: {layout-ncol=\"1\"}\n![Estructura de carpetas del Qproject tras la creación del blog](./imagenes/tt_01/img_05.png){fig-align=\"center\"}\n:::\n\n\n\n\n#### Se han creado 2 subcarpetas\n\nSi comparamos la estructura de carpetas antes y después de hacer `Render Website` vemos que **se han creado 2 carpetas**: \n\n\n::: {layout-ncol=2}\n\n1) `_freeze`\n\nLa carpeta `_freeze` podemos dejarla para más adelante.\n:::\n\n\n\n::: {layout-ncol=2}\n\n2) `_site`\n\nLa carpeta `_site` es la que realmente contiene el blog. Si alojas el contenido de esa carpeta en un servidor web se verá el blog que hemos creado.\n:::\n\n#### Contenido de `/_site/`\n\nAntes de publicar el blog, vamos a ver el contenido de la carpeta `_site` que es la que contiene realmente el blog:\n\n\n::: {#fig-04 layout-ncol=\"1\"}\n![](./imagenes/tt_01/img_06.png){fig-align=\"center\"}\n\nContenido de `_site`, la carpeta que contiene el blog\n:::\n\n#### Tarea 2.3\n\n::: {.callout-important icon=\"false\"}\n#### Tarea 2.3: Ver el blog\n\n- Enseguida publicaremos el blog en Quartopub, pero antes, vamos a  verlo en local; para ello solo tienes que pinchar en el archivo `./blog_prueba_00/_site/index.html`\n\n- Ese fichero es el que contiene la \"Landing Page\" o \"Home\" de nuestro blog.\n\n- Como ves el blog es muy sencillo, solo tiene 2 páginas: la Home Page (que consiste en un listado de posts) y la página `About`.\n\n:::\n\n\n\n<br>\n\n#### La página principal del blog\n\n- Hemos visto que la **página principal (Home)** del blog consiste en una lista de los posts de nuestro blog^[Ahora mismo es una lista corta porque el blog solo tiene 2 posts] \n\n- La página principal (o Home) de nuestro blog es el archivo `index.html`.\n\n- El archivo `index.html` ha sido generado por el fichero `index.qmd`. \n\n::: {.callout-warning collapse=\"true\" appearance=\"default\" icon=\"false\"}\n#### Extensiones: ver el contenido  del archivo `index.qmd`\n\nContenido del archivo  `index.qmd` que genera a `index.html`:\n\n\n::: { layout-ncol=\"1\"}\n![](./imagenes/tt_01/img_08.png){fig-align=\"center\"}\n:::\n\n- Como vemos, el archivo `index.qmd` no tiene contenido, sólo contiene un `yaml` o encabezamiento\n\n- Ese encabezamiento genera una lista (`listing:`) con los contenidos (con los ficheros .qmd) que haya en la carpeta `posts`.\n\n- Sí, has imaginado bien, en la carpeta `posts` es donde estarán los ficheros .qmd que generarán los posts\n\n- El resto del yaml son opciones para nuestro blog. Por ejemplo, `sort: \"date desc\"` ordenará el listado de post de más reciente a más antiguo.\n\n- Lo iremos viendo\n:::\n\n\n\n<br>\n\n\n## Alojando el blog\n\nEl blog que hemos creado no es muy interesante, pero vamos a ver lo fácil que es **publicarlo en internet**.\n\n\nHay muchas formas de alojar nuestro blog, por ejemplo [Github Pages](https://pages.github.com/) [Netlify](https://www.netlify.com/) etc... , pero, de momento, usaremos el servicio [Quartopub](https://quartopub.com/)\n\n#### Tarea 2.4\n\n::: {.callout-important icon=\"false\"}\n#### Tarea 2.4: Alojar el blog en Quarto Pub\n\nPara publicar nuestro blog en Quartopub sólo hay que:\n\n- teclear en la **Terminal** de RStudio (panel inferior-izquierda) lo siguiente:  \n\n  ::: {.cell}\n  \n  ```{.bash .cell-code  code-fold=\"false\"}\n  #- desde la Terminal\n  quarto publish quarto-pub\n  ```\n  :::\n\n- Tras ejecutar lo anterior, se te pedirá que autorices en la Terminal.\n\n- Después se abrirá el navegador, tendrás que logearte en `Quarto Pub` y volverás a autorizar. Además te preguntarán el nombre del blog.\n\n:::\n\n\n\n\n<br><br>\n\n::: {.callout-warning collapse=\"true\" appearance=\"default\" icon=\"false\"}\n#### Extensiones: el fichero `_publish.yml`\n\nSi te fijas, tras haberse publicado el blog en \"Quarto Pub\", se habrá creado un **nuevo fichero** en nuestro Qproject: es el fichero `_publish.yml`. En él solamente están los metadatos necesarios para publicar y **actualizar nuestro blog**.\n\n::: {layout-ncol=1}\n![](./imagenes/tt_01/img_07.png){fig-align=\"center\"}\n\n:::\n\n:::\n\n\n\n\n\n<br><br>\n\n\n## Resumen\n\n::: {.callout-tip collapse=\"true\" appearance=\"default\" icon=\"false\"}\n#### Resumen\n\nEn este tutorial, la **segunda parte del taller**, hemos visto:\n\n- Como crear un Qproject con la estructura de carpetas y archivos necesaria para generar un blog básico\n\n- Hemos visto (de forma rápida) el contenido, los archivos, que hay en el Qproject. \n\n- El Qproject contiene 3 archivos que serán los importantes, los que trabajaremos en el próximo tutorial, concretamente:  `_quarto_yml`, `index.qmd` y `about.qmd`\n\n- Hemos aprendido a generar el blog a través de RStudio, simplemente `Build > Render Website`\n\n- Hemos visto que el blog realmente se aloja en la carpeta `_site` y que la homepage es `index.html`\n\n- La homepage del blog es un listado de post (lógicamente, es un blog!!)\n\n- La homepage (`index.html`) es generada por el archivo `index.qmd`\n\n- El archivo `index.qmd` solo tiene `yaml`\n\n- Hemos publicado el blog en Quarto Pub\n\n:::\n\n\n\n\n\n\n\n## Referencias\n\n(Algunos artículos sobre creación de blogs en Quarto)\n\n- [ Eric Ekholm. 2022. Modifying the Default Quarto Blog Structure](https://www.ericekholm.com/posts/demo-quarto-site/)  es una web con blog . GOOOOD\n\n- [Bea Milz. 2022. Creating a Blog with Quarto in 10 Steps](https://beamilz.com/posts/2022-06-05-creating-a-blog-with-quarto/en/)\n\n- [Navarro, Danielle. 2022. “Notes from a Data Witch - Porting a Distill Blog to Quarto](https://blog.djnavarro.net/posts/2022-04-20_porting-to-quarto/)\n\n- [Quarto - Creating a Blog](https://quarto.org/docs/websites/website-blog.html)\n\n- [Alison Hill. 2022. We Don’t Talk about Quarto](https://www.apreshill.com/blog/2022-04-we-dont-talk-about-quarto/)",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}